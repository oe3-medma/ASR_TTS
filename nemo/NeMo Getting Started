{"cells":[{"cell_type":"markdown","metadata":{"id":"RYGnI-EZp_nK"},"source":["# Getting Started: Sample Conversational AI application\n","This notebook shows how to use NVIDIA NeMo (https://github.com/NVIDIA/NeMo) to construct a toy demo which translate Mandarin audio file into English one.\n","\n","The demo demonstrates how to:\n","\n","* Instantiate pre-trained NeMo models from NVIDIA NGC.\n","* Transcribe audio with (Mandarin) speech recognition model.\n","* Translate text with machine translation model.\n","* Generate audio with text-to-speech models."]},{"cell_type":"markdown","metadata":{"id":"V72HXYuQ_p9a"},"source":["## Installation\n","NeMo can be installed via simple pip command.\n","This will take about 4 minutes.\n","\n","(The installation method below should work inside your new Conda environment or in an NVIDIA docker container.)"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"efDmTWf1_iYK","executionInfo":{"status":"ok","timestamp":1695038695889,"user_tz":-120,"elapsed":244570,"user":{"displayName":"","userId":""}},"outputId":"ad6a81bc-101c-47db-b60f-91ba84c4073b","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[33mDEPRECATION: git+https://github.com/NVIDIA/NeMo.git@main#egg=nemo_toolkit[all] contains an egg fragment with a non-PEP 508 name pip 25.0 will enforce this behaviour change. A possible replacement is to use the req @ url syntax, and remove the egg fragment. Discussion can be found at https://github.com/pypa/pip/issues/11617\u001b[0m\u001b[33m\n","\u001b[0mCollecting nemo_toolkit[all]\n","  Cloning https://github.com/NVIDIA/NeMo.git (to revision main) to /tmp/pip-install-2oapi7qo/nemo-toolkit_7bfe9b1fa231406b92c2811bdc3f77ea\n","  Running command git clone --filter=blob:none --quiet https://github.com/NVIDIA/NeMo.git /tmp/pip-install-2oapi7qo/nemo-toolkit_7bfe9b1fa231406b92c2811bdc3f77ea\n","  Resolved https://github.com/NVIDIA/NeMo.git to commit 33f5b9f98e8f48d37ca1980861fe630103598090\n","  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","Collecting huggingface-hub (from nemo_toolkit[all])\n","  Downloading huggingface_hub-0.17.1-py3-none-any.whl (294 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m294.8/294.8 kB\u001b[0m \u001b[31m4.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numba in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (0.56.4)\n","Requirement already satisfied: numpy<1.24,>=1.22 in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (1.23.5)\n","Collecting onnx>=1.7.0 (from nemo_toolkit[all])\n","  Downloading onnx-1.14.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (14.6 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m14.6/14.6 MB\u001b[0m \u001b[31m56.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (2.8.2)\n","Collecting ruamel.yaml (from nemo_toolkit[all])\n","  Downloading ruamel.yaml-0.17.32-py3-none-any.whl (112 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m112.2/112.2 kB\u001b[0m \u001b[31m12.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (1.2.2)\n","Collecting setuptools==65.5.1 (from nemo_toolkit[all])\n","  Downloading setuptools-65.5.1-py3-none-any.whl (1.2 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.2/1.2 MB\u001b[0m \u001b[31m50.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: tensorboard in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (2.13.0)\n","Requirement already satisfied: text-unidecode in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (1.3)\n","Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (2.0.1+cu118)\n","Requirement already satisfied: tqdm>=4.41.0 in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (4.66.1)\n","Collecting wget (from nemo_toolkit[all])\n","  Downloading wget-3.2.zip (10 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: wrapt in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (1.15.0)\n","Collecting black==19.10b0 (from nemo_toolkit[all])\n","  Downloading black-19.10b0-py36-none-any.whl (97 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m97.5/97.5 kB\u001b[0m \u001b[31m10.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting click==8.0.2 (from nemo_toolkit[all])\n","  Downloading click-8.0.2-py3-none-any.whl (97 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m97.6/97.6 kB\u001b[0m \u001b[31m11.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting isort<6.0.0,>5.1.0 (from nemo_toolkit[all])\n","  Downloading isort-5.12.0-py3-none-any.whl (91 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m91.2/91.2 kB\u001b[0m \u001b[31m11.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting parameterized (from nemo_toolkit[all])\n","  Downloading parameterized-0.9.0-py2.py3-none-any.whl (20 kB)\n","Requirement already satisfied: pytest in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (7.4.1)\n","Collecting pytest-runner (from nemo_toolkit[all])\n","  Downloading pytest_runner-6.0.0-py3-none-any.whl (7.2 kB)\n","Requirement already satisfied: sphinx in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (5.0.2)\n","Collecting sphinxcontrib-bibtex (from nemo_toolkit[all])\n","  Downloading sphinxcontrib_bibtex-2.6.1-py3-none-any.whl (40 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m40.9/40.9 kB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting wandb (from nemo_toolkit[all])\n","  Downloading wandb-0.15.10-py3-none-any.whl (2.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m85.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting hydra-core<=1.3.2,>1.3 (from nemo_toolkit[all])\n","  Downloading hydra_core-1.3.2-py3-none-any.whl (154 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m154.5/154.5 kB\u001b[0m \u001b[31m20.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting omegaconf<=2.3 (from nemo_toolkit[all])\n","  Downloading omegaconf-2.3.0-py3-none-any.whl (79 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.5/79.5 kB\u001b[0m \u001b[31m10.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting pytorch-lightning<=2.0.7,>=2.0 (from nemo_toolkit[all])\n","  Downloading pytorch_lightning-2.0.7-py3-none-any.whl (724 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m725.0/725.0 kB\u001b[0m \u001b[31m57.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting torchmetrics>=0.11.0 (from nemo_toolkit[all])\n","  Downloading torchmetrics-1.1.2-py3-none-any.whl (764 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m764.8/764.8 kB\u001b[0m \u001b[31m60.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting transformers>=4.0.1 (from nemo_toolkit[all])\n","  Downloading transformers-4.33.2-py3-none-any.whl (7.6 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.6/7.6 MB\u001b[0m \u001b[31m108.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting webdataset<=0.1.62,>=0.1.48 (from nemo_toolkit[all])\n","  Downloading webdataset-0.1.62-py3-none-any.whl (32 kB)\n","Requirement already satisfied: inflect in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (7.0.0)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (1.5.3)\n","Requirement already satisfied: pydantic<2 in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (1.10.12)\n","Collecting sacremoses>=0.0.43 (from nemo_toolkit[all])\n","  Downloading sacremoses-0.0.53.tar.gz (880 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m880.6/880.6 kB\u001b[0m \u001b[31m70.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Collecting sentencepiece<1.0.0 (from nemo_toolkit[all])\n","  Downloading sentencepiece-0.1.99-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.3/1.3 MB\u001b[0m \u001b[31m74.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting youtokentome>=1.0.5 (from nemo_toolkit[all])\n","  Downloading youtokentome-1.0.6.tar.gz (86 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m86.7/86.7 kB\u001b[0m \u001b[31m8.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Collecting braceexpand (from nemo_toolkit[all])\n","  Downloading braceexpand-0.1.7-py2.py3-none-any.whl (5.9 kB)\n","Requirement already satisfied: editdistance in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (0.6.2)\n","Collecting g2p-en (from nemo_toolkit[all])\n","  Downloading g2p_en-2.1.0-py3-none-any.whl (3.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.1/3.1 MB\u001b[0m \u001b[31m107.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: ipywidgets in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (7.7.1)\n","Collecting jiwer (from nemo_toolkit[all])\n","  Downloading jiwer-3.0.3-py3-none-any.whl (21 kB)\n","Collecting kaldi-python-io (from nemo_toolkit[all])\n","  Downloading kaldi-python-io-1.2.2.tar.gz (8.8 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Collecting kaldiio (from nemo_toolkit[all])\n","  Downloading kaldiio-2.18.0-py3-none-any.whl (28 kB)\n","Requirement already satisfied: librosa>=0.9.0 in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (0.10.1)\n","Collecting marshmallow (from nemo_toolkit[all])\n","  Downloading marshmallow-3.20.1-py3-none-any.whl (49 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m49.4/49.4 kB\u001b[0m \u001b[31m6.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (3.7.1)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (23.1)\n","Collecting pyannote.core (from nemo_toolkit[all])\n","  Downloading pyannote.core-5.0.0-py3-none-any.whl (58 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m58.5/58.5 kB\u001b[0m \u001b[31m8.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting pyannote.metrics (from nemo_toolkit[all])\n","  Downloading pyannote.metrics-3.2.1-py3-none-any.whl (51 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m51.4/51.4 kB\u001b[0m \u001b[31m6.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting pydub (from nemo_toolkit[all])\n","  Downloading pydub-0.25.1-py2.py3-none-any.whl (32 kB)\n","Requirement already satisfied: scipy>=0.14 in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (1.11.2)\n","Requirement already satisfied: soundfile in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (0.12.1)\n","Collecting sox (from nemo_toolkit[all])\n","  Downloading sox-1.4.1-py2.py3-none-any.whl (39 kB)\n","Collecting texterrors (from nemo_toolkit[all])\n","  Downloading texterrors-0.4.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m77.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting boto3 (from nemo_toolkit[all])\n","  Downloading boto3-1.28.49-py3-none-any.whl (135 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m135.8/135.8 kB\u001b[0m \u001b[31m15.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting datasets (from nemo_toolkit[all])\n","  Downloading datasets-2.14.5-py3-none-any.whl (519 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m519.6/519.6 kB\u001b[0m \u001b[31m53.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting einops (from nemo_toolkit[all])\n","  Downloading einops-0.6.1-py3-none-any.whl (42 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.2/42.2 kB\u001b[0m \u001b[31m5.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting faiss-cpu (from nemo_toolkit[all])\n","  Downloading faiss_cpu-1.7.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (17.6 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m17.6/17.6 MB\u001b[0m \u001b[31m65.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting fasttext (from nemo_toolkit[all])\n","  Downloading fasttext-0.9.2.tar.gz (68 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m68.8/68.8 kB\u001b[0m \u001b[31m8.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Collecting flask-restful (from nemo_toolkit[all])\n","  Downloading Flask_RESTful-0.3.10-py2.py3-none-any.whl (26 kB)\n","Collecting ftfy (from nemo_toolkit[all])\n","  Downloading ftfy-6.1.1-py3-none-any.whl (53 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m53.1/53.1 kB\u001b[0m \u001b[31m6.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: gdown in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (4.6.6)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (3.9.0)\n","Collecting ijson (from nemo_toolkit[all])\n","  Downloading ijson-3.2.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (111 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m111.8/111.8 kB\u001b[0m \u001b[31m12.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: jieba in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (0.42.1)\n","Collecting markdown2 (from nemo_toolkit[all])\n","  Downloading markdown2-2.4.10-py2.py3-none-any.whl (39 kB)\n","Collecting megatron-core==0.2.0 (from nemo_toolkit[all])\n","  Downloading megatron_core-0.2.0-py3-none-any.whl (46 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m46.0/46.0 kB\u001b[0m \u001b[31m5.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: nltk>=3.6.5 in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (3.8.1)\n","Collecting opencc (from nemo_toolkit[all])\n","  Downloading OpenCC-1.1.6-cp310-cp310-manylinux1_x86_64.whl (778 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m778.3/778.3 kB\u001b[0m \u001b[31m55.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting pangu (from nemo_toolkit[all])\n","  Downloading pangu-4.0.6.1-py3-none-any.whl (6.4 kB)\n","Collecting rapidfuzz (from nemo_toolkit[all])\n","  Downloading rapidfuzz-3.3.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.1/3.1 MB\u001b[0m \u001b[31m54.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting rouge-score (from nemo_toolkit[all])\n","  Downloading rouge_score-0.1.2.tar.gz (17 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Collecting sacrebleu[ja] (from nemo_toolkit[all])\n","  Downloading sacrebleu-2.3.1-py3-none-any.whl (118 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m118.9/118.9 kB\u001b[0m \u001b[31m14.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting sentence-transformers (from nemo_toolkit[all])\n","  Downloading sentence-transformers-2.2.2.tar.gz (85 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m86.0/86.0 kB\u001b[0m \u001b[31m11.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: tensorstore in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (0.1.41)\n","Collecting zarr (from nemo_toolkit[all])\n","  Downloading zarr-2.16.1-py3-none-any.whl (206 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m206.9/206.9 kB\u001b[0m \u001b[31m23.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting attrdict (from nemo_toolkit[all])\n","  Downloading attrdict-2.0.1-py2.py3-none-any.whl (9.9 kB)\n","Collecting kornia (from nemo_toolkit[all])\n","  Downloading kornia-0.7.0-py2.py3-none-any.whl (705 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m705.7/705.7 kB\u001b[0m \u001b[31m57.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nemo-text-processing (from nemo_toolkit[all])\n","  Downloading nemo_text_processing-0.2.0rc0-py3-none-any.whl (2.4 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.4/2.4 MB\u001b[0m \u001b[31m99.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting pypinyin (from nemo_toolkit[all])\n","  Downloading pypinyin-0.49.0-py2.py3-none-any.whl (1.4 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.4/1.4 MB\u001b[0m \u001b[31m93.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting pypinyin-dict (from nemo_toolkit[all])\n","  Downloading pypinyin_dict-0.6.0-py2.py3-none-any.whl (9.5 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.5/9.5 MB\u001b[0m \u001b[31m51.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting progress>=1.5 (from nemo_toolkit[all])\n","  Downloading progress-1.6.tar.gz (7.8 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: tabulate>=0.8.7 in /usr/local/lib/python3.10/dist-packages (from nemo_toolkit[all]) (0.9.0)\n","Collecting textdistance>=4.1.5 (from nemo_toolkit[all])\n","  Downloading textdistance-4.5.0-py3-none-any.whl (31 kB)\n","Requirement already satisfied: attrs>=18.1.0 in /usr/local/lib/python3.10/dist-packages (from black==19.10b0->nemo_toolkit[all]) (23.1.0)\n","Requirement already satisfied: appdirs in /usr/local/lib/python3.10/dist-packages (from black==19.10b0->nemo_toolkit[all]) (1.4.4)\n","Requirement already satisfied: toml>=0.9.4 in /usr/local/lib/python3.10/dist-packages (from black==19.10b0->nemo_toolkit[all]) (0.10.2)\n","Collecting typed-ast>=1.4.0 (from black==19.10b0->nemo_toolkit[all])\n","  Downloading typed_ast-1.5.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (824 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m824.7/824.7 kB\u001b[0m \u001b[31m69.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: regex in /usr/local/lib/python3.10/dist-packages (from black==19.10b0->nemo_toolkit[all]) (2023.6.3)\n","Collecting pathspec<1,>=0.6 (from black==19.10b0->nemo_toolkit[all])\n","  Downloading pathspec-0.11.2-py3-none-any.whl (29 kB)\n","Collecting antlr4-python3-runtime==4.9.* (from hydra-core<=1.3.2,>1.3->nemo_toolkit[all])\n","  Downloading antlr4-python3-runtime-4.9.3.tar.gz (117 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m117.0/117.0 kB\u001b[0m \u001b[31m16.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","INFO: pip is looking at multiple versions of jiwer to determine which version is compatible with other requirements. This could take a while.\n","Collecting jiwer (from nemo_toolkit[all])\n","  Downloading jiwer-3.0.2-py3-none-any.whl (21 kB)\n","  Downloading jiwer-3.0.1-py3-none-any.whl (21 kB)\n","  Downloading jiwer-3.0.0-py3-none-any.whl (21 kB)\n","  Downloading jiwer-2.6.0-py3-none-any.whl (20 kB)\n","  Downloading jiwer-2.5.2-py3-none-any.whl (15 kB)\n","Collecting rapidfuzz (from nemo_toolkit[all])\n","  Downloading rapidfuzz-2.13.7-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.2 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.2/2.2 MB\u001b[0m \u001b[31m93.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: audioread>=2.1.9 in /usr/local/lib/python3.10/dist-packages (from librosa>=0.9.0->nemo_toolkit[all]) (3.0.0)\n","Requirement already satisfied: joblib>=0.14 in /usr/local/lib/python3.10/dist-packages (from librosa>=0.9.0->nemo_toolkit[all]) (1.3.2)\n","Requirement already satisfied: decorator>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from librosa>=0.9.0->nemo_toolkit[all]) (4.4.2)\n","Requirement already satisfied: pooch>=1.0 in /usr/local/lib/python3.10/dist-packages (from librosa>=0.9.0->nemo_toolkit[all]) (1.7.0)\n","Requirement already satisfied: soxr>=0.3.2 in /usr/local/lib/python3.10/dist-packages (from librosa>=0.9.0->nemo_toolkit[all]) (0.3.6)\n","Requirement already satisfied: typing-extensions>=4.1.1 in /usr/local/lib/python3.10/dist-packages (from librosa>=0.9.0->nemo_toolkit[all]) (4.5.0)\n","Requirement already satisfied: lazy-loader>=0.1 in /usr/local/lib/python3.10/dist-packages (from librosa>=0.9.0->nemo_toolkit[all]) (0.3)\n","Requirement already satisfied: msgpack>=1.0 in /usr/local/lib/python3.10/dist-packages (from librosa>=0.9.0->nemo_toolkit[all]) (1.0.5)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->nemo_toolkit[all]) (1.1.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->nemo_toolkit[all]) (0.11.0)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->nemo_toolkit[all]) (4.42.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->nemo_toolkit[all]) (1.4.5)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->nemo_toolkit[all]) (9.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->nemo_toolkit[all]) (3.1.1)\n","Requirement already satisfied: llvmlite<0.40,>=0.39.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba->nemo_toolkit[all]) (0.39.1)\n","Requirement already satisfied: PyYAML>=5.1.0 in /usr/local/lib/python3.10/dist-packages (from omegaconf<=2.3->nemo_toolkit[all]) (6.0.1)\n","Requirement already satisfied: protobuf>=3.20.2 in /usr/local/lib/python3.10/dist-packages (from onnx>=1.7.0->nemo_toolkit[all]) (3.20.3)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil->nemo_toolkit[all]) (1.16.0)\n","Requirement already satisfied: fsspec[http]>2021.06.0 in /usr/local/lib/python3.10/dist-packages (from pytorch-lightning<=2.0.7,>=2.0->nemo_toolkit[all]) (2023.6.0)\n","Collecting lightning-utilities>=0.7.0 (from pytorch-lightning<=2.0.7,>=2.0->nemo_toolkit[all])\n","  Downloading lightning_utilities-0.9.0-py3-none-any.whl (23 kB)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->nemo_toolkit[all]) (3.2.0)\n","Requirement already satisfied: cffi>=1.0 in /usr/local/lib/python3.10/dist-packages (from soundfile->nemo_toolkit[all]) (1.15.1)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch->nemo_toolkit[all]) (3.12.2)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch->nemo_toolkit[all]) (1.12)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch->nemo_toolkit[all]) (3.1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch->nemo_toolkit[all]) (3.1.2)\n","Requirement already satisfied: triton==2.0.0 in /usr/local/lib/python3.10/dist-packages (from torch->nemo_toolkit[all]) (2.0.0)\n","Requirement already satisfied: cmake in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->torch->nemo_toolkit[all]) (3.27.4.1)\n","Requirement already satisfied: lit in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->torch->nemo_toolkit[all]) (16.0.6)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers>=4.0.1->nemo_toolkit[all]) (2.31.0)\n","Collecting tokenizers!=0.11.3,<0.14,>=0.11.1 (from transformers>=4.0.1->nemo_toolkit[all])\n","  Downloading tokenizers-0.13.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (7.8 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.8/7.8 MB\u001b[0m \u001b[31m120.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting safetensors>=0.3.1 (from transformers>=4.0.1->nemo_toolkit[all])\n","  Downloading safetensors-0.3.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.3/1.3 MB\u001b[0m \u001b[31m76.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting botocore<1.32.0,>=1.31.49 (from boto3->nemo_toolkit[all])\n","  Downloading botocore-1.31.49-py3-none-any.whl (11.2 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m11.2/11.2 MB\u001b[0m \u001b[31m116.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting jmespath<2.0.0,>=0.7.1 (from boto3->nemo_toolkit[all])\n","  Downloading jmespath-1.0.1-py3-none-any.whl (20 kB)\n","Collecting s3transfer<0.7.0,>=0.6.0 (from boto3->nemo_toolkit[all])\n","  Downloading s3transfer-0.6.2-py3-none-any.whl (79 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.8/79.8 kB\u001b[0m \u001b[31m9.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: pyarrow>=8.0.0 in /usr/local/lib/python3.10/dist-packages (from datasets->nemo_toolkit[all]) (9.0.0)\n","Collecting dill<0.3.8,>=0.3.0 (from datasets->nemo_toolkit[all])\n","  Downloading dill-0.3.7-py3-none-any.whl (115 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m115.3/115.3 kB\u001b[0m \u001b[31m14.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting xxhash (from datasets->nemo_toolkit[all])\n","  Downloading xxhash-3.3.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (194 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m194.1/194.1 kB\u001b[0m \u001b[31m20.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting multiprocess (from datasets->nemo_toolkit[all])\n","  Downloading multiprocess-0.70.15-py310-none-any.whl (134 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m134.8/134.8 kB\u001b[0m \u001b[31m16.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: aiohttp in /usr/local/lib/python3.10/dist-packages (from datasets->nemo_toolkit[all]) (3.8.5)\n","Collecting pybind11>=2.2 (from fasttext->nemo_toolkit[all])\n","  Using cached pybind11-2.11.1-py3-none-any.whl (227 kB)\n","Collecting aniso8601>=0.82 (from flask-restful->nemo_toolkit[all])\n","  Downloading aniso8601-9.0.1-py2.py3-none-any.whl (52 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m52.8/52.8 kB\u001b[0m \u001b[31m6.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: Flask>=0.8 in /usr/local/lib/python3.10/dist-packages (from flask-restful->nemo_toolkit[all]) (2.2.5)\n","Requirement already satisfied: pytz in /usr/local/lib/python3.10/dist-packages (from flask-restful->nemo_toolkit[all]) (2023.3.post1)\n","Requirement already satisfied: wcwidth>=0.2.5 in /usr/local/lib/python3.10/dist-packages (from ftfy->nemo_toolkit[all]) (0.2.6)\n","Collecting distance>=0.1.3 (from g2p-en->nemo_toolkit[all])\n","  Downloading Distance-0.1.3.tar.gz (180 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m180.3/180.3 kB\u001b[0m \u001b[31m21.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from gdown->nemo_toolkit[all]) (4.11.2)\n","Requirement already satisfied: ipykernel>=4.5.1 in /usr/local/lib/python3.10/dist-packages (from ipywidgets->nemo_toolkit[all]) (5.5.6)\n","Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets->nemo_toolkit[all]) (0.2.0)\n","Requirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.10/dist-packages (from ipywidgets->nemo_toolkit[all]) (5.7.1)\n","Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets->nemo_toolkit[all]) (3.6.5)\n","Requirement already satisfied: ipython>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets->nemo_toolkit[all]) (7.34.0)\n","Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets->nemo_toolkit[all]) (3.0.8)\n","Collecting cdifflib (from nemo-text-processing->nemo_toolkit[all])\n","  Downloading cdifflib-1.2.6.tar.gz (11 kB)\n","  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","  Installing backend dependencies ... \u001b[?25l\u001b[?25hdone\n","  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","Collecting pynini==2.1.5 (from nemo-text-processing->nemo_toolkit[all])\n","  Downloading pynini-2.1.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (161.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m161.3/161.3 MB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: Cython>=0.29 in /usr/local/lib/python3.10/dist-packages (from pynini==2.1.5->nemo-text-processing->nemo_toolkit[all]) (3.0.2)\n","Requirement already satisfied: sortedcontainers>=2.0.4 in /usr/local/lib/python3.10/dist-packages (from pyannote.core->nemo_toolkit[all]) (2.4.0)\n","Collecting pyannote.database>=4.0.1 (from pyannote.metrics->nemo_toolkit[all])\n","  Downloading pyannote.database-5.0.1-py3-none-any.whl (48 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m48.1/48.1 kB\u001b[0m \u001b[31m6.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting docopt>=0.6.2 (from pyannote.metrics->nemo_toolkit[all])\n","  Downloading docopt-0.6.2.tar.gz (25 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: iniconfig in /usr/local/lib/python3.10/dist-packages (from pytest->nemo_toolkit[all]) (2.0.0)\n","Requirement already satisfied: pluggy<2.0,>=0.12 in /usr/local/lib/python3.10/dist-packages (from pytest->nemo_toolkit[all]) (1.3.0)\n","Requirement already satisfied: exceptiongroup>=1.0.0rc8 in /usr/local/lib/python3.10/dist-packages (from pytest->nemo_toolkit[all]) (1.1.3)\n","Requirement already satisfied: tomli>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from pytest->nemo_toolkit[all]) (2.0.1)\n","Requirement already satisfied: absl-py in /usr/local/lib/python3.10/dist-packages (from rouge-score->nemo_toolkit[all]) (1.4.0)\n","Collecting ruamel.yaml.clib>=0.2.7 (from ruamel.yaml->nemo_toolkit[all])\n","  Downloading ruamel.yaml.clib-0.2.7-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl (485 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m485.6/485.6 kB\u001b[0m \u001b[31m44.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting portalocker (from sacrebleu[ja]->nemo_toolkit[all])\n","  Downloading portalocker-2.8.2-py3-none-any.whl (17 kB)\n","Collecting colorama (from sacrebleu[ja]->nemo_toolkit[all])\n","  Downloading colorama-0.4.6-py2.py3-none-any.whl (25 kB)\n","Requirement already satisfied: lxml in /usr/local/lib/python3.10/dist-packages (from sacrebleu[ja]->nemo_toolkit[all]) (4.9.3)\n","Collecting mecab-python3==1.0.5 (from sacrebleu[ja]->nemo_toolkit[all])\n","  Downloading mecab_python3-1.0.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (581 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m581.1/581.1 kB\u001b[0m \u001b[31m46.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting ipadic<2.0,>=1.0 (from sacrebleu[ja]->nemo_toolkit[all])\n","  Downloading ipadic-1.0.0.tar.gz (13.4 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.4/13.4 MB\u001b[0m \u001b[31m108.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: torchvision in /usr/local/lib/python3.10/dist-packages (from sentence-transformers->nemo_toolkit[all]) (0.15.2+cu118)\n","Requirement already satisfied: sphinxcontrib-applehelp in /usr/local/lib/python3.10/dist-packages (from sphinx->nemo_toolkit[all]) (1.0.7)\n","Requirement already satisfied: sphinxcontrib-devhelp in /usr/local/lib/python3.10/dist-packages (from sphinx->nemo_toolkit[all]) (1.0.5)\n","Requirement already satisfied: sphinxcontrib-jsmath in /usr/local/lib/python3.10/dist-packages (from sphinx->nemo_toolkit[all]) (1.0.1)\n","Requirement already satisfied: sphinxcontrib-htmlhelp>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from sphinx->nemo_toolkit[all]) (2.0.4)\n","Requirement already satisfied: sphinxcontrib-serializinghtml>=1.1.5 in /usr/local/lib/python3.10/dist-packages (from sphinx->nemo_toolkit[all]) (1.1.9)\n","Requirement already satisfied: sphinxcontrib-qthelp in /usr/local/lib/python3.10/dist-packages (from sphinx->nemo_toolkit[all]) (1.0.6)\n","Requirement already satisfied: Pygments>=2.0 in /usr/local/lib/python3.10/dist-packages (from sphinx->nemo_toolkit[all]) (2.16.1)\n","Requirement already satisfied: docutils<0.19,>=0.14 in /usr/local/lib/python3.10/dist-packages (from sphinx->nemo_toolkit[all]) (0.18.1)\n","Requirement already satisfied: snowballstemmer>=1.1 in /usr/local/lib/python3.10/dist-packages (from sphinx->nemo_toolkit[all]) (2.2.0)\n","Requirement already satisfied: babel>=1.3 in /usr/local/lib/python3.10/dist-packages (from sphinx->nemo_toolkit[all]) (2.12.1)\n","Requirement already satisfied: alabaster<0.8,>=0.7 in /usr/local/lib/python3.10/dist-packages (from sphinx->nemo_toolkit[all]) (0.7.13)\n","Requirement already satisfied: imagesize in /usr/local/lib/python3.10/dist-packages (from sphinx->nemo_toolkit[all]) (1.4.1)\n","Collecting docutils<0.19,>=0.14 (from sphinx->nemo_toolkit[all])\n","  Downloading docutils-0.17.1-py2.py3-none-any.whl (575 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m575.5/575.5 kB\u001b[0m \u001b[31m56.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting pybtex>=0.24 (from sphinxcontrib-bibtex->nemo_toolkit[all])\n","  Downloading pybtex-0.24.0-py2.py3-none-any.whl (561 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m561.4/561.4 kB\u001b[0m \u001b[31m55.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting pybtex-docutils>=1.0.0 (from sphinxcontrib-bibtex->nemo_toolkit[all])\n","  Downloading pybtex_docutils-1.0.3-py3-none-any.whl (6.4 kB)\n","Requirement already satisfied: grpcio>=1.48.2 in /usr/local/lib/python3.10/dist-packages (from tensorboard->nemo_toolkit[all]) (1.57.0)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.10/dist-packages (from tensorboard->nemo_toolkit[all]) (2.17.3)\n","Requirement already satisfied: google-auth-oauthlib<1.1,>=0.5 in /usr/local/lib/python3.10/dist-packages (from tensorboard->nemo_toolkit[all]) (1.0.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard->nemo_toolkit[all]) (3.4.4)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard->nemo_toolkit[all]) (0.7.1)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard->nemo_toolkit[all]) (2.3.7)\n","Requirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.10/dist-packages (from tensorboard->nemo_toolkit[all]) (0.41.2)\n","Collecting plac (from texterrors->nemo_toolkit[all])\n","  Downloading plac-1.3.5-py2.py3-none-any.whl (22 kB)\n","Collecting loguru (from texterrors->nemo_toolkit[all])\n","  Downloading loguru-0.7.2-py3-none-any.whl (62 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.5/62.5 kB\u001b[0m \u001b[31m7.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: termcolor in /usr/local/lib/python3.10/dist-packages (from texterrors->nemo_toolkit[all]) (2.3.0)\n","Collecting Levenshtein (from texterrors->nemo_toolkit[all])\n","  Downloading Levenshtein-0.21.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (172 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m172.5/172.5 kB\u001b[0m \u001b[31m19.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting GitPython!=3.1.29,>=1.0.0 (from wandb->nemo_toolkit[all])\n","  Downloading GitPython-3.1.36-py3-none-any.whl (189 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m189.5/189.5 kB\u001b[0m \u001b[31m24.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: psutil>=5.0.0 in /usr/local/lib/python3.10/dist-packages (from wandb->nemo_toolkit[all]) (5.9.5)\n","Collecting sentry-sdk>=1.0.0 (from wandb->nemo_toolkit[all])\n","  Downloading sentry_sdk-1.31.0-py2.py3-none-any.whl (224 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m224.8/224.8 kB\u001b[0m \u001b[31m27.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting docker-pycreds>=0.4.0 (from wandb->nemo_toolkit[all])\n","  Downloading docker_pycreds-0.4.0-py2.py3-none-any.whl (9.0 kB)\n","Collecting pathtools (from wandb->nemo_toolkit[all])\n","  Downloading pathtools-0.1.2.tar.gz (11 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Collecting setproctitle (from wandb->nemo_toolkit[all])\n","  Downloading setproctitle-1.3.2-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (30 kB)\n","Collecting asciitree (from zarr->nemo_toolkit[all])\n","  Downloading asciitree-0.3.3.tar.gz (4.0 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Collecting fasteners (from zarr->nemo_toolkit[all])\n","  Downloading fasteners-0.18-py3-none-any.whl (18 kB)\n","Collecting numcodecs>=0.10.0 (from zarr->nemo_toolkit[all])\n","  Downloading numcodecs-0.11.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (6.7 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.7/6.7 MB\u001b[0m \u001b[31m104.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting urllib3<1.27,>=1.25.4 (from botocore<1.32.0,>=1.31.49->boto3->nemo_toolkit[all])\n","  Downloading urllib3-1.26.16-py2.py3-none-any.whl (143 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m143.1/143.1 kB\u001b[0m \u001b[31m17.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0->soundfile->nemo_toolkit[all]) (2.21)\n","Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from Flask>=0.8->flask-restful->nemo_toolkit[all]) (2.1.2)\n","Requirement already satisfied: charset-normalizer<4.0,>=2.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets->nemo_toolkit[all]) (3.2.0)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets->nemo_toolkit[all]) (6.0.4)\n","Requirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets->nemo_toolkit[all]) (4.0.3)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets->nemo_toolkit[all]) (1.9.2)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets->nemo_toolkit[all]) (1.4.0)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets->nemo_toolkit[all]) (1.3.1)\n","Collecting gitdb<5,>=4.0.1 (from GitPython!=3.1.29,>=1.0.0->wandb->nemo_toolkit[all])\n","  Downloading gitdb-4.0.10-py3-none-any.whl (62 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.7/62.7 kB\u001b[0m \u001b[31m8.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard->nemo_toolkit[all]) (5.3.1)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard->nemo_toolkit[all]) (0.3.0)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard->nemo_toolkit[all]) (4.9)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib<1.1,>=0.5->tensorboard->nemo_toolkit[all]) (1.3.1)\n","Requirement already satisfied: jupyter-client in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets->nemo_toolkit[all]) (6.1.12)\n","Requirement already satisfied: tornado>=4.2 in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets->nemo_toolkit[all]) (6.3.2)\n","Collecting jedi>=0.16 (from ipython>=4.0.0->ipywidgets->nemo_toolkit[all])\n","  Downloading jedi-0.19.0-py2.py3-none-any.whl (1.6 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.6/1.6 MB\u001b[0m \u001b[31m89.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets->nemo_toolkit[all]) (0.7.5)\n","Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets->nemo_toolkit[all]) (3.0.39)\n","Requirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets->nemo_toolkit[all]) (0.2.0)\n","Requirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets->nemo_toolkit[all]) (0.1.6)\n","Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets->nemo_toolkit[all]) (4.8.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch->nemo_toolkit[all]) (2.1.3)\n","Requirement already satisfied: entrypoints in /usr/local/lib/python3.10/dist-packages (from numcodecs>=0.10.0->zarr->nemo_toolkit[all]) (0.4)\n","Requirement already satisfied: platformdirs>=2.5.0 in /usr/local/lib/python3.10/dist-packages (from pooch>=1.0->librosa>=0.9.0->nemo_toolkit[all]) (3.10.0)\n","Requirement already satisfied: typer[all]>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from pyannote.database>=4.0.1->pyannote.metrics->nemo_toolkit[all]) (0.9.0)\n","Collecting latexcodec>=1.0.4 (from pybtex>=0.24->sphinxcontrib-bibtex->nemo_toolkit[all])\n","  Downloading latexcodec-2.0.1-py2.py3-none-any.whl (18 kB)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers>=4.0.1->nemo_toolkit[all]) (3.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers>=4.0.1->nemo_toolkit[all]) (2023.7.22)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch->nemo_toolkit[all]) (1.3.0)\n","Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.10/dist-packages (from widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (6.5.5)\n","Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->gdown->nemo_toolkit[all]) (2.5)\n","Requirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /usr/local/lib/python3.10/dist-packages (from requests->transformers>=4.0.1->nemo_toolkit[all]) (1.7.1)\n","Collecting smmap<6,>=3.0.1 (from gitdb<5,>=4.0.1->GitPython!=3.1.29,>=1.0.0->wandb->nemo_toolkit[all])\n","  Downloading smmap-5.0.1-py3-none-any.whl (24 kB)\n","Requirement already satisfied: parso<0.9.0,>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->ipython>=4.0.0->ipywidgets->nemo_toolkit[all]) (0.8.3)\n","Requirement already satisfied: pyzmq<25,>=17 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (23.2.1)\n","Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (23.1.0)\n","Requirement already satisfied: jupyter-core>=4.6.1 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (5.3.1)\n","Requirement already satisfied: nbformat in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (5.9.2)\n","Requirement already satisfied: nbconvert>=5 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (6.5.4)\n","Requirement already satisfied: nest-asyncio>=1.5 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (1.5.7)\n","Requirement already satisfied: Send2Trash>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (1.8.2)\n","Requirement already satisfied: terminado>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (0.17.1)\n","Requirement already satisfied: prometheus-client in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (0.17.1)\n","Requirement already satisfied: nbclassic>=0.4.7 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (1.0.0)\n","Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/dist-packages (from pexpect>4.3->ipython>=4.0.0->ipywidgets->nemo_toolkit[all]) (0.7.0)\n","Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard->nemo_toolkit[all]) (0.5.0)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<1.1,>=0.5->tensorboard->nemo_toolkit[all]) (3.2.2)\n","Collecting shellingham<2.0.0,>=1.3.0 (from typer[all]>=0.2.1->pyannote.database>=4.0.1->pyannote.metrics->nemo_toolkit[all])\n","  Downloading shellingham-1.5.3-py2.py3-none-any.whl (9.7 kB)\n","Requirement already satisfied: rich<14.0.0,>=10.11.0 in /usr/local/lib/python3.10/dist-packages (from typer[all]>=0.2.1->pyannote.database>=4.0.1->pyannote.metrics->nemo_toolkit[all]) (13.5.2)\n","Requirement already satisfied: jupyter-server>=1.8 in /usr/local/lib/python3.10/dist-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (1.24.0)\n","Requirement already satisfied: notebook-shim>=0.2.3 in /usr/local/lib/python3.10/dist-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (0.2.3)\n","Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (6.0.0)\n","Requirement already satisfied: defusedxml in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (0.7.1)\n","Requirement already satisfied: jupyterlab-pygments in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (0.2.2)\n","Requirement already satisfied: mistune<2,>=0.8.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (0.8.4)\n","Requirement already satisfied: nbclient>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (0.8.0)\n","Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (1.5.0)\n","Requirement already satisfied: tinycss2 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (1.2.1)\n","Requirement already satisfied: fastjsonschema in /usr/local/lib/python3.10/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (2.18.0)\n","Requirement already satisfied: jsonschema>=2.6 in /usr/local/lib/python3.10/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (4.19.0)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich<14.0.0,>=10.11.0->typer[all]>=0.2.1->pyannote.database>=4.0.1->pyannote.metrics->nemo_toolkit[all]) (3.0.0)\n","Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.10/dist-packages (from argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (21.2.0)\n","Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (2023.7.1)\n","Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (0.30.2)\n","Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (0.10.2)\n","Requirement already satisfied: anyio<4,>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (3.7.1)\n","Requirement already satisfied: websocket-client in /usr/local/lib/python3.10/dist-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (1.6.2)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich<14.0.0,>=10.11.0->typer[all]>=0.2.1->pyannote.database>=4.0.1->pyannote.metrics->nemo_toolkit[all]) (0.1.2)\n","Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (0.5.1)\n","Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.1.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->nemo_toolkit[all]) (1.3.0)\n","Building wheels for collected packages: antlr4-python3-runtime, progress, sacremoses, youtokentome, fasttext, kaldi-python-io, nemo_toolkit, rouge-score, sentence-transformers, wget, distance, docopt, ipadic, asciitree, cdifflib, pathtools\n","  Building wheel for antlr4-python3-runtime (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for antlr4-python3-runtime: filename=antlr4_python3_runtime-4.9.3-py3-none-any.whl size=144554 sha256=ddb9fcbcfa96d455d198d80a93e11857683235e79f076b00b7866f12767a3206\n","  Stored in directory: /root/.cache/pip/wheels/12/93/dd/1f6a127edc45659556564c5730f6d4e300888f4bca2d4c5a88\n","  Building wheel for progress (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for progress: filename=progress-1.6-py3-none-any.whl size=9610 sha256=2f3f2f10b15f073996ca06b1817f937f502d193169210eb9360f7e543ed14fc0\n","  Stored in directory: /root/.cache/pip/wheels/a2/68/5f/c339b20a41659d856c93ccdce6a33095493eb82c3964aac5a1\n","  Building wheel for sacremoses (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for sacremoses: filename=sacremoses-0.0.53-py3-none-any.whl size=895241 sha256=59a18ff81083ffafccbb9e81cf3ca3e9f8c8e6d82de09eb236ec1ae63a7fa141\n","  Stored in directory: /root/.cache/pip/wheels/00/24/97/a2ea5324f36bc626e1ea0267f33db6aa80d157ee977e9e42fb\n","  Building wheel for youtokentome (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for youtokentome: filename=youtokentome-1.0.6-cp310-cp310-linux_x86_64.whl size=1948591 sha256=d8e559199b0bc9f0aca51bd7429de72d39cb0e5beb48db969e82f74bf98a2a7c\n","  Stored in directory: /root/.cache/pip/wheels/df/85/f8/301d2ba45f43f30bed2fe413efa760bc726b8b660ed9c2900c\n","  Building wheel for fasttext (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for fasttext: filename=fasttext-0.9.2-cp310-cp310-linux_x86_64.whl size=4199770 sha256=d1ebf2d422de1cc88461928ac46cc1e86cb34f742bbfa53f23a42db6abbba610\n","  Stored in directory: /root/.cache/pip/wheels/a5/13/75/f811c84a8ab36eedbaef977a6a58a98990e8e0f1967f98f394\n","  Building wheel for kaldi-python-io (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for kaldi-python-io: filename=kaldi_python_io-1.2.2-py3-none-any.whl size=8948 sha256=85feb822f0ec90208829115e9241935be567a0e69eabee0b1662d0d193509594\n","  Stored in directory: /root/.cache/pip/wheels/b7/23/5f/49d3a826be576faf61d84e8028e1914bb36a5586ee2613b087\n","  Building wheel for nemo_toolkit (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for nemo_toolkit: filename=nemo_toolkit-1.21.0rc0-py3-none-any.whl size=2540124 sha256=708144333ec37ba6ed96a7ea971c8323fdc9c9d8e9d39c4a4205bf2cb44e315c\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-nwbeermb/wheels/6c/d2/4f/1572b895b6a4dbd9fdf534c882d9bc6e94e700a6db5bb20423\n","  Building wheel for rouge-score (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for rouge-score: filename=rouge_score-0.1.2-py3-none-any.whl size=24932 sha256=da03e87ed21611c3b4a1d1ccaf59c2c464e812ebca6bef4295bafa7404de3d98\n","  Stored in directory: /root/.cache/pip/wheels/5f/dd/89/461065a73be61a532ff8599a28e9beef17985c9e9c31e541b4\n","  Building wheel for sentence-transformers (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for sentence-transformers: filename=sentence_transformers-2.2.2-py3-none-any.whl size=125923 sha256=6888299a71960c02086b4b109670e697472bc6849578d1ab3abd30fbd48d3abe\n","  Stored in directory: /root/.cache/pip/wheels/62/f2/10/1e606fd5f02395388f74e7462910fe851042f97238cbbd902f\n","  Building wheel for wget (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for wget: filename=wget-3.2-py3-none-any.whl size=9655 sha256=6fa63cea306e74e985c1e40ec41d84c2eaf27a82f7b1a8badf0902cd606b8400\n","  Stored in directory: /root/.cache/pip/wheels/8b/f1/7f/5c94f0a7a505ca1c81cd1d9208ae2064675d97582078e6c769\n","  Building wheel for distance (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for distance: filename=Distance-0.1.3-py3-none-any.whl size=16258 sha256=018561f4397608a7fc935234e0a32e66b1479498ddccfecf20a824409d91d1af\n","  Stored in directory: /root/.cache/pip/wheels/e8/bb/de/f71bf63559ea9a921059a5405806f7ff6ed612a9231c4a9309\n","  Building wheel for docopt (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for docopt: filename=docopt-0.6.2-py2.py3-none-any.whl size=13705 sha256=478bb4e2e077f19219da54f0034842d0acaa8ce71cb7e9165df585185c0aac36\n","  Stored in directory: /root/.cache/pip/wheels/fc/ab/d4/5da2067ac95b36618c629a5f93f809425700506f72c9732fac\n","  Building wheel for ipadic (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for ipadic: filename=ipadic-1.0.0-py3-none-any.whl size=13556703 sha256=88203f23ec3b70b45c3c9f1436cb53329bd42a31a14531790f2ae2f368c08821\n","  Stored in directory: /root/.cache/pip/wheels/5b/ea/e3/2f6e0860a327daba3b030853fce4483ed37468bbf1101c59c3\n","  Building wheel for asciitree (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for asciitree: filename=asciitree-0.3.3-py3-none-any.whl size=5034 sha256=8b2b504d007ab28f0b789c227f0e2a67e5a5edd2b37b415484c939c379ca0d7b\n","  Stored in directory: /root/.cache/pip/wheels/7f/4e/be/1171b40f43b918087657ec57cf3b81fa1a2e027d8755baa184\n","  Building wheel for cdifflib (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for cdifflib: filename=cdifflib-1.2.6-cp310-cp310-linux_x86_64.whl size=27680 sha256=b6882ff5f73073d806a6e5f4d90d22234b4bf26717f3965b020363dc22b9ea1a\n","  Stored in directory: /root/.cache/pip/wheels/87/a7/fd/8061e24ed08689045cb6d1ca303768dc463b20a5a338174841\n","  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pathtools: filename=pathtools-0.1.2-py3-none-any.whl size=8791 sha256=e97c5224e6e4f5f04ab41f2ba655a299b4e11022a733b9aa5036dbc79649cce9\n","  Stored in directory: /root/.cache/pip/wheels/e7/f3/22/152153d6eb222ee7a56ff8617d80ee5207207a8c00a7aab794\n","Successfully built antlr4-python3-runtime progress sacremoses youtokentome fasttext kaldi-python-io nemo_toolkit rouge-score sentence-transformers wget distance docopt ipadic asciitree cdifflib pathtools\n","Installing collected packages: wget, tokenizers, sentencepiece, safetensors, pydub, progress, plac, pathtools, pangu, opencc, mecab-python3, ipadic, ijson, faiss-cpu, docopt, distance, braceexpand, asciitree, antlr4-python3-runtime, aniso8601, xxhash, webdataset, urllib3, typed-ast, textdistance, sox, smmap, shellingham, setuptools, setproctitle, ruamel.yaml.clib, rapidfuzz, pytest-runner, pypinyin, pynini, pybind11, portalocker, pathspec, parameterized, onnx, omegaconf, numcodecs, marshmallow, markdown2, loguru, lightning-utilities, latexcodec, kaldiio, kaldi-python-io, jmespath, jedi, isort, ftfy, fasteners, einops, docutils, docker-pycreds, dill, colorama, click, cdifflib, attrdict, zarr, youtokentome, sentry-sdk, sacremoses, sacrebleu, ruamel.yaml, pypinyin-dict, pybtex, pyannote.core, multiprocess, Levenshtein, jiwer, hydra-core, gitdb, fasttext, botocore, black, texterrors, s3transfer, rouge-score, pybtex-docutils, huggingface-hub, GitPython, g2p-en, flask-restful, wandb, transformers, pyannote.database, datasets, boto3, pyannote.metrics, nemo-text-processing, torchmetrics, sphinxcontrib-bibtex, sentence-transformers, pytorch-lightning, nemo_toolkit, megatron-core, kornia\n","  Attempting uninstall: urllib3\n","    Found existing installation: urllib3 2.0.4\n","    Uninstalling urllib3-2.0.4:\n","      Successfully uninstalled urllib3-2.0.4\n","  Attempting uninstall: setuptools\n","    Found existing installation: setuptools 67.7.2\n","    Uninstalling setuptools-67.7.2:\n","      Successfully uninstalled setuptools-67.7.2\n","  Attempting uninstall: docutils\n","    Found existing installation: docutils 0.18.1\n","    Uninstalling docutils-0.18.1:\n","      Successfully uninstalled docutils-0.18.1\n","  Attempting uninstall: click\n","    Found existing installation: click 8.1.7\n","    Uninstalling click-8.1.7:\n","      Successfully uninstalled click-8.1.7\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","cvxpy 1.3.2 requires setuptools>65.5.1, but you have setuptools 65.5.1 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed GitPython-3.1.36 Levenshtein-0.21.1 aniso8601-9.0.1 antlr4-python3-runtime-4.9.3 asciitree-0.3.3 attrdict-2.0.1 black-19.10b0 boto3-1.28.49 botocore-1.31.49 braceexpand-0.1.7 cdifflib-1.2.6 click-8.0.2 colorama-0.4.6 datasets-2.14.5 dill-0.3.7 distance-0.1.3 docker-pycreds-0.4.0 docopt-0.6.2 docutils-0.17.1 einops-0.6.1 faiss-cpu-1.7.4 fasteners-0.18 fasttext-0.9.2 flask-restful-0.3.10 ftfy-6.1.1 g2p-en-2.1.0 gitdb-4.0.10 huggingface-hub-0.17.1 hydra-core-1.3.2 ijson-3.2.3 ipadic-1.0.0 isort-5.12.0 jedi-0.19.0 jiwer-2.5.2 jmespath-1.0.1 kaldi-python-io-1.2.2 kaldiio-2.18.0 kornia-0.7.0 latexcodec-2.0.1 lightning-utilities-0.9.0 loguru-0.7.2 markdown2-2.4.10 marshmallow-3.20.1 mecab-python3-1.0.5 megatron-core-0.2.0 multiprocess-0.70.15 nemo-text-processing-0.2.0rc0 nemo_toolkit-1.21.0rc0 numcodecs-0.11.0 omegaconf-2.3.0 onnx-1.14.1 opencc-1.1.6 pangu-4.0.6.1 parameterized-0.9.0 pathspec-0.11.2 pathtools-0.1.2 plac-1.3.5 portalocker-2.8.2 progress-1.6 pyannote.core-5.0.0 pyannote.database-5.0.1 pyannote.metrics-3.2.1 pybind11-2.11.1 pybtex-0.24.0 pybtex-docutils-1.0.3 pydub-0.25.1 pynini-2.1.5 pypinyin-0.49.0 pypinyin-dict-0.6.0 pytest-runner-6.0.0 pytorch-lightning-2.0.7 rapidfuzz-2.13.7 rouge-score-0.1.2 ruamel.yaml-0.17.32 ruamel.yaml.clib-0.2.7 s3transfer-0.6.2 sacrebleu-2.3.1 sacremoses-0.0.53 safetensors-0.3.3 sentence-transformers-2.2.2 sentencepiece-0.1.99 sentry-sdk-1.31.0 setproctitle-1.3.2 setuptools-65.5.1 shellingham-1.5.3 smmap-5.0.1 sox-1.4.1 sphinxcontrib-bibtex-2.6.1 textdistance-4.5.0 texterrors-0.4.4 tokenizers-0.13.3 torchmetrics-1.1.2 transformers-4.33.2 typed-ast-1.5.5 urllib3-1.26.16 wandb-0.15.10 webdataset-0.1.62 wget-3.2 xxhash-3.3.0 youtokentome-1.0.6 zarr-2.16.1\n"]}],"source":["BRANCH = 'main'\n","!python -m pip install git+https://github.com/NVIDIA/NeMo.git@$BRANCH#egg=nemo_toolkit[all]\n"]},{"cell_type":"markdown","metadata":{"id":"EyJ5HiiPrPKA"},"source":["## Import all necessary packages"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"tdUqxeUEA8nw","executionInfo":{"status":"ok","timestamp":1695038715071,"user_tz":-120,"elapsed":19208,"user":{"displayName":"","userId":""}}},"outputs":[],"source":["# Import NeMo and it's ASR, NLP and TTS collections\n","import nemo\n","# Import Speech Recognition collection\n","import nemo.collections.asr as nemo_asr\n","# Import Natural Language Processing collection\n","import nemo.collections.nlp as nemo_nlp\n","# Import Speech Synthesis collection\n","import nemo.collections.tts as nemo_tts\n","# We'll use this to listen to audio\n","import IPython"]},{"cell_type":"markdown","metadata":{"id":"bt2EZyU3A1aq"},"source":["## Instantiate pre-trained NeMo models\n","\n","Every NeMo model has these methods:\n","\n","* ``list_available_models()`` - it will list all models currently available on NGC and their names.\n","\n","* ``from_pretrained(...)`` API downloads and initialized model directly from the NGC using model name.\n"]},{"cell_type":"markdown","source":[],"metadata":{"id":"MSWVI9njLkgw"}},{"cell_type":"code","execution_count":3,"metadata":{"id":"YNNHs5Xjr8ox","scrolled":true,"executionInfo":{"status":"ok","timestamp":1695038715071,"user_tz":-120,"elapsed":24,"user":{"displayName":"","userId":""}},"outputId":"877b4531-9c77-45b6-e3a6-1f5e46a4dedf","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[PretrainedModelInfo(\n"," \tpretrained_model_name=QuartzNet15x5Base-En,\n"," \tdescription=QuartzNet15x5 model trained on six datasets: LibriSpeech, Mozilla Common Voice (validated clips from en_1488h_2019-12-10), WSJ, Fisher, Switchboard, and NSC Singapore English. It was trained with Apex/Amp optimization level O1 for 600 epochs. The model achieves a WER of 3.79% on LibriSpeech dev-clean, and a WER of 10.05% on dev-other. Please visit https://ngc.nvidia.com/catalog/models/nvidia:nemospeechmodels for further details.,\n"," \tlocation=https://api.ngc.nvidia.com/v2/models/nvidia/nemospeechmodels/versions/1.0.0a5/files/QuartzNet15x5Base-En.nemo\n"," ),\n"," PretrainedModelInfo(\n"," \tpretrained_model_name=stt_en_quartznet15x5,\n"," \tdescription=For details about this model, please visit https://ngc.nvidia.com/catalog/models/nvidia:nemo:stt_en_quartznet15x5,\n"," \tlocation=https://api.ngc.nvidia.com/v2/models/nvidia/nemo/stt_en_quartznet15x5/versions/1.0.0rc1/files/stt_en_quartznet15x5.nemo\n"," ),\n"," PretrainedModelInfo(\n"," \tpretrained_model_name=stt_en_jasper10x5dr,\n"," \tdescription=For details about this model, please visit https://ngc.nvidia.com/catalog/models/nvidia:nemo:stt_en_jasper10x5dr,\n"," \tlocation=https://api.ngc.nvidia.com/v2/models/nvidia/nemo/stt_en_jasper10x5dr/versions/1.0.0rc1/files/stt_en_jasper10x5dr.nemo\n"," ),\n"," PretrainedModelInfo(\n"," \tpretrained_model_name=stt_ca_quartznet15x5,\n"," \tdescription=For details about this model, please visit https://ngc.nvidia.com/catalog/models/nvidia:nemo:stt_ca_quartznet15x5,\n"," \tlocation=https://api.ngc.nvidia.com/v2/models/nvidia/nemo/stt_ca_quartznet15x5/versions/1.0.0rc1/files/stt_ca_quartznet15x5.nemo\n"," ),\n"," PretrainedModelInfo(\n"," \tpretrained_model_name=stt_it_quartznet15x5,\n"," \tdescription=For details about this model, please visit https://ngc.nvidia.com/catalog/models/nvidia:nemo:stt_it_quartznet15x5,\n"," \tlocation=https://api.ngc.nvidia.com/v2/models/nvidia/nemo/stt_it_quartznet15x5/versions/1.0.0rc1/files/stt_it_quartznet15x5.nemo\n"," ),\n"," PretrainedModelInfo(\n"," \tpretrained_model_name=stt_fr_quartznet15x5,\n"," \tdescription=For details about this model, please visit https://ngc.nvidia.com/catalog/models/nvidia:nemo:stt_fr_quartznet15x5,\n"," \tlocation=https://api.ngc.nvidia.com/v2/models/nvidia/nemo/stt_fr_quartznet15x5/versions/1.0.0rc1/files/stt_fr_quartznet15x5.nemo\n"," ),\n"," PretrainedModelInfo(\n"," \tpretrained_model_name=stt_es_quartznet15x5,\n"," \tdescription=For details about this model, please visit https://ngc.nvidia.com/catalog/models/nvidia:nemo:stt_es_quartznet15x5,\n"," \tlocation=https://api.ngc.nvidia.com/v2/models/nvidia/nemo/stt_es_quartznet15x5/versions/1.0.0rc1/files/stt_es_quartznet15x5.nemo\n"," ),\n"," PretrainedModelInfo(\n"," \tpretrained_model_name=stt_de_quartznet15x5,\n"," \tdescription=For details about this model, please visit https://ngc.nvidia.com/catalog/models/nvidia:nemo:stt_de_quartznet15x5,\n"," \tlocation=https://api.ngc.nvidia.com/v2/models/nvidia/nemo/stt_de_quartznet15x5/versions/1.0.0rc1/files/stt_de_quartznet15x5.nemo\n"," ),\n"," PretrainedModelInfo(\n"," \tpretrained_model_name=stt_pl_quartznet15x5,\n"," \tdescription=For details about this model, please visit https://ngc.nvidia.com/catalog/models/nvidia:nemo:stt_pl_quartznet15x5,\n"," \tlocation=https://api.ngc.nvidia.com/v2/models/nvidia/nemo/stt_pl_quartznet15x5/versions/1.0.0rc1/files/stt_pl_quartznet15x5.nemo\n"," ),\n"," PretrainedModelInfo(\n"," \tpretrained_model_name=stt_ru_quartznet15x5,\n"," \tdescription=For details about this model, please visit https://ngc.nvidia.com/catalog/models/nvidia:nemo:stt_ru_quartznet15x5,\n"," \tlocation=https://api.ngc.nvidia.com/v2/models/nvidia/nemo/stt_ru_quartznet15x5/versions/1.0.0rc1/files/stt_ru_quartznet15x5.nemo\n"," ),\n"," PretrainedModelInfo(\n"," \tpretrained_model_name=stt_zh_citrinet_512,\n"," \tdescription=For details about this model, please visit https://ngc.nvidia.com/catalog/models/nvidia:nemo:stt_zh_citrinet_512,\n"," \tlocation=https://api.ngc.nvidia.com/v2/models/nvidia/nemo/stt_zh_citrinet_512/versions/1.0.0rc1/files/stt_zh_citrinet_512.nemo\n"," ),\n"," PretrainedModelInfo(\n"," \tpretrained_model_name=stt_zh_citrinet_1024_gamma_0_25,\n"," \tdescription=For details about this model, please visit https://ngc.nvidia.com/catalog/models/nvidia:nemo:stt_zh_citrinet_1024_gamma_0_25,\n"," \tlocation=https://api.ngc.nvidia.com/v2/models/nvidia/nemo/stt_zh_citrinet_1024_gamma_0_25/versions/1.0.0/files/stt_zh_citrinet_1024_gamma_0_25.nemo\n"," ),\n"," PretrainedModelInfo(\n"," \tpretrained_model_name=stt_zh_citrinet_1024_gamma_0_25,\n"," \tdescription=For details about this model, please visit https://ngc.nvidia.com/catalog/models/nvidia:nemo:stt_zh_citrinet_1024_gamma_0_25,\n"," \tlocation=https://api.ngc.nvidia.com/v2/models/nvidia/nemo/stt_zh_citrinet_1024_gamma_0_25/versions/1.0.0/files/stt_zh_citrinet_1024_gamma_0_25.nemo\n"," ),\n"," PretrainedModelInfo(\n"," \tpretrained_model_name=asr_talknet_aligner,\n"," \tdescription=For details about this model, please visit https://ngc.nvidia.com/catalog/models/nvidia:nemo:asr_talknet_aligner,\n"," \tlocation=https://api.ngc.nvidia.com/v2/models/nvidia/nemo/asr_talknet_aligner/versions/1.0.0rc1/files/qn5x5_libri_tts_phonemes.nemo\n"," )]"]},"metadata":{},"execution_count":3}],"source":["# Here is an example of all CTC-based models:\n","nemo_asr.models.EncDecCTCModel.list_available_models()\n","# More ASR Models are available - see: nemo_asr.models.ASRModel.list_available_models()"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"1h9nhICjA5Dk","scrolled":true,"executionInfo":{"status":"ok","timestamp":1695039059590,"user_tz":-120,"elapsed":344526,"user":{"displayName":"","userId":""}},"outputId":"72c01f5d-c6e1-461c-ff07-8f1d3069773f","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["[NeMo I 2023-09-18 12:08:05 cloud:68] Downloading from: https://api.ngc.nvidia.com/v2/models/nvidia/nemo/stt_zh_citrinet_1024_gamma_0_25/versions/1.0.0/files/stt_zh_citrinet_1024_gamma_0_25.nemo to /root/.cache/torch/NeMo/NeMo_1.21.0rc0/stt_zh_citrinet_1024_gamma_0_25/e4a8b1119971335507d9672e03bc80f4/stt_zh_citrinet_1024_gamma_0_25.nemo\n","[NeMo I 2023-09-18 12:08:46 common:913] Instantiating model from pre-trained checkpoint\n"]},{"output_type":"stream","name":"stderr","text":["\u001b[1;30;43mStreaming output truncated to the last 5000 lines.\u001b[0m\n","    - 佯\n","    - 佰\n","    - 佳\n","    - 佶\n","    - 佻\n","    - 佼\n","    - 使\n","    - 侃\n","    - 侄\n","    - 侈\n","    - 例\n","    - 侍\n","    - 侏\n","    - 侑\n","    - 侗\n","    - 供\n","    - 依\n","    - 侠\n","    - 侣\n","    - 侥\n","    - 侦\n","    - 侧\n","    - 侨\n","    - 侬\n","    - 侮\n","    - 侯\n","    - 侵\n","    - 便\n","    - 促\n","    - 俄\n","    - 俊\n","    - 俎\n","    - 俏\n","    - 俐\n","    - 俑\n","    - 俗\n","    - 俘\n","    - 俚\n","    - 保\n","    - 俞\n","    - 俟\n","    - 信\n","    - 俨\n","    - 俩\n","    - 俪\n","    - 俭\n","    - 修\n","    - 俯\n","    - 俱\n","    - 俸\n","    - 俺\n","    - 俾\n","    - 倌\n","    - 倍\n","    - 倒\n","    - 倔\n","    - 倘\n","    - 候\n","    - 倚\n","    - 倜\n","    - 借\n","    - 倡\n","    - 倦\n","    - 倩\n","    - 倪\n","    - 倭\n","    - 债\n","    - 值\n","    - 倾\n","    - 偃\n","    - 假\n","    - 偈\n","    - 偌\n","    - 偎\n","    - 偏\n","    - 偓\n","    - 偕\n","    - 做\n","    - 停\n","    - 健\n","    - 偶\n","    - 偷\n","    - 偻\n","    - 偿\n","    - 傀\n","    - 傅\n","    - 傍\n","    - 傣\n","    - 傥\n","    - 储\n","    - 催\n","    - 傲\n","    - 傻\n","    - 像\n","    - 僚\n","    - 僧\n","    - 僮\n","    - 僵\n","    - 僻\n","    - 儋\n","    - 儒\n","    - 儡\n","    - 儿\n","    - 兀\n","    - 允\n","    - 元\n","    - 兄\n","    - 充\n","    - 兆\n","    - 先\n","    - 光\n","    - 克\n","    - 免\n","    - 兑\n","    - 兔\n","    - 兖\n","    - 党\n","    - 兜\n","    - 兢\n","    - 入\n","    - 全\n","    - 八\n","    - 公\n","    - 六\n","    - 兮\n","    - 兰\n","    - 共\n","    - 关\n","    - 兴\n","    - 兵\n","    - 其\n","    - 具\n","    - 典\n","    - 兹\n","    - 养\n","    - 兼\n","    - 兽\n","    - 冀\n","    - 内\n","    - 冈\n","    - 冉\n","    - 册\n","    - 再\n","    - 冒\n","    - 冕\n","    - 冗\n","    - 写\n","    - 军\n","    - 农\n","    - 冠\n","    - 冢\n","    - 冤\n","    - 冥\n","    - 冬\n","    - 冯\n","    - 冰\n","    - 冲\n","    - 决\n","    - 况\n","    - 冶\n","    - 冷\n","    - 冻\n","    - 冼\n","    - 冽\n","    - 净\n","    - 凄\n","    - 准\n","    - 凇\n","    - 凉\n","    - 凋\n","    - 凌\n","    - 减\n","    - 凑\n","    - 凛\n","    - 凝\n","    - 几\n","    - 凡\n","    - 凤\n","    - 凭\n","    - 凯\n","    - 凰\n","    - 凳\n","    - 凶\n","    - 凸\n","    - 凹\n","    - 出\n","    - 击\n","    - 函\n","    - 凿\n","    - 刀\n","    - 刁\n","    - 刃\n","    - 分\n","    - 切\n","    - 刊\n","    - 刍\n","    - 刎\n","    - 刑\n","    - 划\n","    - 列\n","    - 刘\n","    - 则\n","    - 刚\n","    - 创\n","    - 初\n","    - 删\n","    - 判\n","    - 刨\n","    - 利\n","    - 别\n","    - 刮\n","    - 到\n","    - 制\n","    - 刷\n","    - 券\n","    - 刹\n","    - 刺\n","    - 刻\n","    - 刽\n","    - 剁\n","    - 剂\n","    - 剃\n","    - 削\n","    - 剌\n","    - 前\n","    - 剐\n","    - 剑\n","    - 剔\n","    - 剖\n","    - 剜\n","    - 剥\n","    - 剧\n","    - 剩\n","    - 剪\n","    - 副\n","    - 割\n","    - 剽\n","    - 剿\n","    - 劈\n","    - 力\n","    - 劝\n","    - 办\n","    - 功\n","    - 加\n","    - 务\n","    - 劣\n","    - 动\n","    - 助\n","    - 努\n","    - 劫\n","    - 劭\n","    - 励\n","    - 劲\n","    - 劳\n","    - 劵\n","    - 劾\n","    - 势\n","    - 勃\n","    - 勇\n","    - 勉\n","    - 勋\n","    - 勐\n","    - 勒\n","    - 勘\n","    - 募\n","    - 勤\n","    - 勺\n","    - 勾\n","    - 勿\n","    - 匀\n","    - 包\n","    - 匆\n","    - 匈\n","    - 匏\n","    - 匕\n","    - 化\n","    - 北\n","    - 匙\n","    - 匝\n","    - 匠\n","    - 匡\n","    - 匣\n","    - 匪\n","    - 匮\n","    - 匹\n","    - 区\n","    - 医\n","    - 匾\n","    - 匿\n","    - 十\n","    - 千\n","    - 升\n","    - 午\n","    - 卉\n","    - 半\n","    - 华\n","    - 协\n","    - 卑\n","    - 卒\n","    - 卓\n","    - 单\n","    - 卖\n","    - 南\n","    - 博\n","    - 卜\n","    - 卞\n","    - 占\n","    - 卡\n","    - 卢\n","    - 卤\n","    - 卦\n","    - 卧\n","    - 卫\n","    - 卯\n","    - 印\n","    - 危\n","    - 卲\n","    - 即\n","    - 却\n","    - 卵\n","    - 卷\n","    - 卸\n","    - 卿\n","    - 厂\n","    - 厄\n","    - 厅\n","    - 历\n","    - 厉\n","    - 压\n","    - 厌\n","    - 厕\n","    - 厘\n","    - 厚\n","    - 厝\n","    - 原\n","    - 厢\n","    - 厥\n","    - 厦\n","    - 厨\n","    - 厩\n","    - 厮\n","    - 去\n","    - 县\n","    - 叁\n","    - 参\n","    - 又\n","    - 叉\n","    - 及\n","    - 友\n","    - 双\n","    - 反\n","    - 发\n","    - 叔\n","    - 取\n","    - 受\n","    - 变\n","    - 叙\n","    - 叛\n","    - 叠\n","    - 口\n","    - 古\n","    - 句\n","    - 另\n","    - 叨\n","    - 叩\n","    - 只\n","    - 叫\n","    - 召\n","    - 叭\n","    - 叮\n","    - 可\n","    - 台\n","    - 叱\n","    - 史\n","    - 右\n","    - 叵\n","    - 叶\n","    - 号\n","    - 司\n","    - 叹\n","    - 叼\n","    - 叽\n","    - 吁\n","    - 吃\n","    - 各\n","    - 吆\n","    - 合\n","    - 吉\n","    - 吊\n","    - 吋\n","    - 同\n","    - 名\n","    - 后\n","    - 吏\n","    - 吐\n","    - 向\n","    - 吒\n","    - 吓\n","    - 吕\n","    - 吖\n","    - 吗\n","    - 君\n","    - 吝\n","    - 吞\n","    - 吟\n","    - 吠\n","    - 否\n","    - 吧\n","    - 吨\n","    - 吩\n","    - 含\n","    - 听\n","    - 吭\n","    - 吮\n","    - 启\n","    - 吱\n","    - 吴\n","    - 吵\n","    - 吸\n","    - 吹\n","    - 吻\n","    - 吼\n","    - 吾\n","    - 呀\n","    - 呃\n","    - 呆\n","    - 呈\n","    - 告\n","    - 呐\n","    - 呕\n","    - 呗\n","    - 员\n","    - 呛\n","    - 呜\n","    - 呢\n","    - 呦\n","    - 周\n","    - 呱\n","    - 呲\n","    - 味\n","    - 呵\n","    - 呷\n","    - 呸\n","    - 呻\n","    - 呼\n","    - 命\n","    - 咀\n","    - 咂\n","    - 咄\n","    - 咆\n","    - 咋\n","    - 和\n","    - 咎\n","    - 咏\n","    - 咐\n","    - 咒\n","    - 咔\n","    - 咕\n","    - 咖\n","    - 咘\n","    - 咙\n","    - 咚\n","    - 咝\n","    - 咣\n","    - 咤\n","    - 咦\n","    - 咧\n","    - 咨\n","    - 咩\n","    - 咪\n","    - 咫\n","    - 咬\n","    - 咭\n","    - 咯\n","    - 咱\n","    - 咳\n","    - 咸\n","    - 咻\n","    - 咽\n","    - 哀\n","    - 品\n","    - 哂\n","    - 哄\n","    - 哆\n","    - 哇\n","    - 哈\n","    - 哉\n","    - 响\n","    - 哎\n","    - 哐\n","    - 哑\n","    - 哒\n","    - 哔\n","    - 哕\n","    - 哗\n","    - 哟\n","    - 哥\n","    - 哦\n","    - 哨\n","    - 哩\n","    - 哪\n","    - 哭\n","    - 哮\n","    - 哲\n","    - 哺\n","    - 哼\n","    - 哽\n","    - 唁\n","    - 唆\n","    - 唇\n","    - 唉\n","    - 唏\n","    - 唐\n","    - 唑\n","    - 唛\n","    - 唠\n","    - 唢\n","    - 唤\n","    - 唧\n","    - 唬\n","    - 售\n","    - 唯\n","    - 唰\n","    - 唱\n","    - 唳\n","    - 唷\n","    - 唾\n","    - 啃\n","    - 啄\n","    - 商\n","    - 啊\n","    - 啕\n","    - 啖\n","    - 啜\n","    - 啡\n","    - 啤\n","    - 啥\n","    - 啦\n","    - 啧\n","    - 啪\n","    - 啬\n","    - 啰\n","    - 啲\n","    - 啵\n","    - 啶\n","    - 啸\n","    - 啼\n","    - 啾\n","    - 喀\n","    - 喁\n","    - 喂\n","    - 喃\n","    - 善\n","    - 喆\n","    - 喇\n","    - 喉\n","    - 喊\n","    - 喋\n","    - 喔\n","    - 喘\n","    - 喜\n","    - 喝\n","    - 喟\n","    - 喧\n","    - 喱\n","    - 喳\n","    - 喵\n","    - 喷\n","    - 喻\n","    - 喽\n","    - 嗄\n","    - 嗅\n","    - 嗑\n","    - 嗒\n","    - 嗓\n","    - 嗔\n","    - 嗖\n","    - 嗜\n","    - 嗝\n","    - 嗡\n","    - 嗣\n","    - 嗤\n","    - 嗦\n","    - 嗨\n","    - 嗪\n","    - 嗫\n","    - 嗬\n","    - 嗯\n","    - 嗲\n","    - 嗷\n","    - 嗽\n","    - 嘀\n","    - 嘈\n","    - 嘉\n","    - 嘎\n","    - 嘏\n","    - 嘘\n","    - 嘛\n","    - 嘞\n","    - 嘟\n","    - 嘣\n","    - 嘭\n","    - 嘱\n","    - 嘲\n","    - 嘴\n","    - 嘶\n","    - 嘹\n","    - 嘻\n","    - 嘿\n","    - 噌\n","    - 噎\n","    - 噗\n","    - 噘\n","    - 噙\n","    - 噜\n","    - 噢\n","    - 噤\n","    - 器\n","    - 噩\n","    - 噪\n","    - 噬\n","    - 噱\n","    - 噶\n","    - 噻\n","    - 噼\n","    - 嚎\n","    - 嚏\n","    - 嚓\n","    - 嚣\n","    - 嚷\n","    - 嚼\n","    - 囊\n","    - 囍\n","    - 囔\n","    - 囗\n","    - 囚\n","    - 四\n","    - 回\n","    - 因\n","    - 团\n","    - 囤\n","    - 囧\n","    - 囫\n","    - 园\n","    - 囯\n","    - 困\n","    - 囱\n","    - 围\n","    - 囵\n","    - 囹\n","    - 固\n","    - 国\n","    - 图\n","    - 圃\n","    - 圄\n","    - 圆\n","    - 圈\n","    - 土\n","    - 圣\n","    - 在\n","    - 圩\n","    - 圪\n","    - 圭\n","    - 地\n","    - 圳\n","    - 圹\n","    - 场\n","    - 圻\n","    - 圾\n","    - 址\n","    - 坂\n","    - 均\n","    - 坊\n","    - 坍\n","    - 坎\n","    - 坏\n","    - 坐\n","    - 坑\n","    - 块\n","    - 坚\n","    - 坛\n","    - 坝\n","    - 坞\n","    - 坟\n","    - 坠\n","    - 坡\n","    - 坤\n","    - 坦\n","    - 坨\n","    - 坩\n","    - 坪\n","    - 坭\n","    - 坯\n","    - 坳\n","    - 坷\n","    - 坻\n","    - 垂\n","    - 垃\n","    - 垄\n","    - 垅\n","    - 型\n","    - 垌\n","    - 垒\n","    - 垚\n","    - 垛\n","    - 垡\n","    - 垢\n","    - 垣\n","    - 垤\n","    - 垦\n","    - 垩\n","    - 垫\n","    - 垭\n","    - 垮\n","    - 埂\n","    - 埃\n","    - 埇\n","    - 埋\n","    - 城\n","    - 埔\n","    - 埕\n","    - 埚\n","    - 埝\n","    - 域\n","    - 埠\n","    - 埭\n","    - 埸\n","    - 培\n","    - 基\n","    - 堀\n","    - 堂\n","    - 堃\n","    - 堆\n","    - 堇\n","    - 堕\n","    - 堡\n","    - 堤\n","    - 堪\n","    - 堰\n","    - 堵\n","    - 堺\n","    - 塌\n","    - 塍\n","    - 塑\n","    - 塔\n","    - 塘\n","    - 塞\n","    - 填\n","    - 塬\n","    - 塾\n","    - 境\n","    - 墅\n","    - 墉\n","    - 墓\n","    - 増\n","    - 墙\n","    - 增\n","    - 墟\n","    - 墨\n","    - 墩\n","    - 壁\n","    - 壑\n","    - 壕\n","    - 壤\n","    - 士\n","    - 壬\n","    - 壮\n","    - 声\n","    - 壳\n","    - 壶\n","    - 壹\n","    - 处\n","    - 备\n","    - 复\n","    - 夏\n","    - 夔\n","    - 夕\n","    - 外\n","    - 夙\n","    - 多\n","    - 夜\n","    - 够\n","    - 大\n","    - 天\n","    - 太\n","    - 夫\n","    - 夭\n","    - 央\n","    - 夯\n","    - 失\n","    - 头\n","    - 夷\n","    - 夸\n","    - 夹\n","    - 夺\n","    - 奁\n","    - 奂\n","    - 奄\n","    - 奇\n","    - 奈\n","    - 奉\n","    - 奋\n","    - 奎\n","    - 奏\n","    - 契\n","    - 奔\n","    - 奕\n","    - 奖\n","    - 套\n","    - 奘\n","    - 奚\n","    - 奠\n","    - 奢\n","    - 奥\n","    - 女\n","    - 奴\n","    - 奶\n","    - 奸\n","    - 她\n","    - 好\n","    - 如\n","    - 妃\n","    - 妄\n","    - 妆\n","    - 妇\n","    - 妈\n","    - 妊\n","    - 妍\n","    - 妒\n","    - 妓\n","    - 妖\n","    - 妙\n","    - 妞\n","    - 妤\n","    - 妥\n","    - 妨\n","    - 妩\n","    - 妪\n","    - 妫\n","    - 妮\n","    - 妯\n","    - 妲\n","    - 妹\n","    - 妻\n","    - 妾\n","    - 姆\n","    - 姊\n","    - 始\n","    - 姐\n","    - 姑\n","    - 姓\n","    - 委\n","    - 姗\n","    - 姚\n","    - 姜\n","    - 姝\n","    - 姣\n","    - 姥\n","    - 姨\n","    - 姬\n","    - 姻\n","    - 姿\n","    - 威\n","    - 娃\n","    - 娄\n","    - 娅\n","    - 娆\n","    - 娇\n","    - 娈\n","    - 娉\n","    - 娌\n","    - 娓\n","    - 娘\n","    - 娜\n","    - 娟\n","    - 娠\n","    - 娣\n","    - 娥\n","    - 娩\n","    - 娱\n","    - 娲\n","    - 娴\n","    - 娶\n","    - 娼\n","    - 婀\n","    - 婆\n","    - 婉\n","    - 婊\n","    - 婕\n","    - 婚\n","    - 婢\n","    - 婧\n","    - 婪\n","    - 婴\n","    - 婵\n","    - 婶\n","    - 婷\n","    - 婺\n","    - 婿\n","    - 媒\n","    - 媚\n","    - 媛\n","    - 媞\n","    - 媲\n","    - 媳\n","    - 嫁\n","    - 嫂\n","    - 嫉\n","    - 嫌\n","    - 嫒\n","    - 嫔\n","    - 嫖\n","    - 嫚\n","    - 嫡\n","    - 嫣\n","    - 嫦\n","    - 嫩\n","    - 嫫\n","    - 嬅\n","    - 嬉\n","    - 嬗\n","    - 嬛\n","    - 嬴\n","    - 嬷\n","    - 孀\n","    - 子\n","    - 孑\n","    - 孔\n","    - 孕\n","    - 字\n","    - 存\n","    - 孙\n","    - 孚\n","    - 孛\n","    - 孜\n","    - 孝\n","    - 孟\n","    - 孢\n","    - 季\n","    - 孤\n","    - 学\n","    - 孩\n","    - 孪\n","    - 孬\n","    - 孰\n","    - 孱\n","    - 孳\n","    - 孵\n","    - 孺\n","    - 孽\n","    - 宁\n","    - 它\n","    - 宅\n","    - 宇\n","    - 守\n","    - 安\n","    - 宋\n","    - 完\n","    - 宏\n","    - 宓\n","    - 宕\n","    - 宗\n","    - 官\n","    - 宙\n","    - 定\n","    - 宛\n","    - 宜\n","    - 宝\n","    - 实\n","    - 宠\n","    - 审\n","    - 客\n","    - 宣\n","    - 室\n","    - 宥\n","    - 宦\n","    - 宪\n","    - 宫\n","    - 宰\n","    - 害\n","    - 宴\n","    - 宵\n","    - 家\n","    - 宸\n","    - 容\n","    - 宽\n","    - 宾\n","    - 宿\n","    - 寂\n","    - 寄\n","    - 寅\n","    - 密\n","    - 寇\n","    - 富\n","    - 寐\n","    - 寒\n","    - 寓\n","    - 寝\n","    - 寞\n","    - 察\n","    - 寡\n","    - 寥\n","    - 寨\n","    - 寮\n","    - 寰\n","    - 寸\n","    - 对\n","    - 寺\n","    - 寻\n","    - 导\n","    - 寿\n","    - 封\n","    - 射\n","    - 尅\n","    - 将\n","    - 尉\n","    - 尊\n","    - 小\n","    - 少\n","    - 尔\n","    - 尕\n","    - 尖\n","    - 尘\n","    - 尚\n","    - 尝\n","    - 尤\n","    - 尧\n","    - 尬\n","    - 就\n","    - 尴\n","    - 尸\n","    - 尹\n","    - 尺\n","    - 尼\n","    - 尽\n","    - 尾\n","    - 尿\n","    - 局\n","    - 屁\n","    - 层\n","    - 居\n","    - 屈\n","    - 屉\n","    - 届\n","    - 屋\n","    - 屌\n","    - 屎\n","    - 屏\n","    - 屐\n","    - 屑\n","    - 展\n","    - 属\n","    - 屠\n","    - 屡\n","    - 履\n","    - 屯\n","    - 山\n","    - 屹\n","    - 屿\n","    - 岁\n","    - 岂\n","    - 岌\n","    - 岐\n","    - 岑\n","    - 岔\n","    - 岖\n","    - 岗\n","    - 岚\n","    - 岛\n","    - 岩\n","    - 岬\n","    - 岭\n","    - 岱\n","    - 岳\n","    - 岷\n","    - 岸\n","    - 峁\n","    - 峋\n","    - 峒\n","    - 峙\n","    - 峡\n","    - 峥\n","    - 峦\n","    - 峨\n","    - 峪\n","    - 峭\n","    - 峰\n","    - 峻\n","    - 崂\n","    - 崃\n","    - 崆\n","    - 崇\n","    - 崎\n","    - 崔\n","    - 崖\n","    - 崛\n","    - 崧\n","    - 崩\n","    - 崭\n","    - 崮\n","    - 崴\n","    - 崽\n","    - 嵇\n","    - 嵊\n","    - 嵋\n","    - 嵌\n","    - 嵘\n","    - 嵛\n","    - 嵩\n","    - 嵬\n","    - 嶂\n","    - 嶙\n","    - 嶝\n","    - 巅\n","    - 巍\n","    - 川\n","    - 州\n","    - 巡\n","    - 巢\n","    - 工\n","    - 左\n","    - 巧\n","    - 巨\n","    - 巩\n","    - 巫\n","    - 差\n","    - 己\n","    - 已\n","    - 巳\n","    - 巴\n","    - 巷\n","    - 巾\n","    - 币\n","    - 市\n","    - 布\n","    - 帅\n","    - 帆\n","    - 师\n","    - 希\n","    - 帐\n","    - 帕\n","    - 帖\n","    - 帘\n","    - 帚\n","    - 帛\n","    - 帜\n","    - 帝\n","    - 带\n","    - 帧\n","    - 席\n","    - 帮\n","    - 帷\n","    - 常\n","    - 帼\n","    - 帽\n","    - 幂\n","    - 幄\n","    - 幅\n","    - 幌\n","    - 幔\n","    - 幕\n","    - 幡\n","    - 幢\n","    - 干\n","    - 平\n","    - 年\n","    - 并\n","    - 幸\n","    - 幺\n","    - 幻\n","    - 幼\n","    - 幽\n","    - 广\n","    - 庄\n","    - 庆\n","    - 庇\n","    - 床\n","    - 序\n","    - 庐\n","    - 库\n","    - 应\n","    - 底\n","    - 庖\n","    - 店\n","    - 庙\n","    - 庚\n","    - 府\n","    - 庞\n","    - 废\n","    - 度\n","    - 座\n","    - 庭\n","    - 庵\n","    - 庶\n","    - 康\n","    - 庸\n","    - 庹\n","    - 庾\n","    - 廉\n","    - 廊\n","    - 廓\n","    - 廖\n","    - 延\n","    - 廷\n","    - 建\n","    - 开\n","    - 异\n","    - 弃\n","    - 弄\n","    - 弈\n","    - 弊\n","    - 弋\n","    - 式\n","    - 弑\n","    - 弓\n","    - 引\n","    - 弗\n","    - 弘\n","    - 弛\n","    - 弟\n","    - 张\n","    - 弥\n","    - 弦\n","    - 弧\n","    - 弩\n","    - 弭\n","    - 弯\n","    - 弱\n","    - 弹\n","    - 强\n","    - 弼\n","    - 归\n","    - 当\n","    - 录\n","    - 彗\n","    - 彝\n","    - 形\n","    - 彤\n","    - 彦\n","    - 彩\n","    - 彪\n","    - 彬\n","    - 彭\n","    - 彰\n","    - 影\n","    - 彷\n","    - 役\n","    - 彻\n","    - 彼\n","    - 往\n","    - 征\n","    - 径\n","    - 待\n","    - 徇\n","    - 很\n","    - 徉\n","    - 徊\n","    - 律\n","    - 徐\n","    - 徒\n","    - 得\n","    - 徘\n","    - 徙\n","    - 徜\n","    - 御\n","    - 徨\n","    - 循\n","    - 微\n","    - 德\n","    - 徽\n","    - 心\n","    - 必\n","    - 忆\n","    - 忌\n","    - 忍\n","    - 忏\n","    - 忐\n","    - 忑\n","    - 忒\n","    - 忖\n","    - 志\n","    - 忘\n","    - 忙\n","    - 忠\n","    - 忡\n","    - 忤\n","    - 忧\n","    - 忪\n","    - 快\n","    - 忱\n","    - 念\n","    - 忻\n","    - 忽\n","    - 忿\n","    - 怀\n","    - 态\n","    - 怂\n","    - 怄\n","    - 怅\n","    - 怆\n","    - 怎\n","    - 怒\n","    - 怕\n","    - 怖\n","    - 怜\n","    - 思\n","    - 怠\n","    - 怡\n","    - 急\n","    - 怦\n","    - 性\n","    - 怨\n","    - 怪\n","    - 怫\n","    - 怯\n","    - 怵\n","    - 总\n","    - 怼\n","    - 怿\n","    - 恁\n","    - 恃\n","    - 恋\n","    - 恍\n","    - 恐\n","    - 恒\n","    - 恕\n","    - 恙\n","    - 恢\n","    - 恣\n","    - 恤\n","    - 恨\n","    - 恩\n","    - 恪\n","    - 恬\n","    - 恭\n","    - 息\n","    - 恰\n","    - 恳\n","    - 恶\n","    - 恸\n","    - 恺\n","    - 恻\n","    - 恼\n","    - 恿\n","    - 悄\n","    - 悉\n","    - 悌\n","    - 悍\n","    - 悔\n","    - 悖\n","    - 悚\n","    - 悟\n","    - 悠\n","    - 患\n","    - 悦\n","    - 您\n","    - 悬\n","    - 悭\n","    - 悯\n","    - 悱\n","    - 悲\n","    - 悴\n","    - 悸\n","    - 悻\n","    - 悼\n","    - 情\n","    - 惆\n","    - 惊\n","    - 惋\n","    - 惑\n","    - 惕\n","    - 惚\n","    - 惜\n","    - 惟\n","    - 惠\n","    - 惦\n","    - 惧\n","    - 惨\n","    - 惩\n","    - 惫\n","    - 惬\n","    - 惭\n","    - 惮\n","    - 惯\n","    - 惰\n","    - 想\n","    - 惶\n","    - 惹\n","    - 惺\n","    - 愁\n","    - 愈\n","    - 愉\n","    - 意\n","    - 愕\n","    - 愚\n","    - 感\n","    - 愣\n","    - 愤\n","    - 愧\n","    - 愫\n","    - 愿\n","    - 慈\n","    - 慌\n","    - 慎\n","    - 慑\n","    - 慕\n","    - 慢\n","    - 慧\n","    - 慨\n","    - 慰\n","    - 慵\n","    - 慷\n","    - 憋\n","    - 憎\n","    - 憔\n","    - 憧\n","    - 憨\n","    - 憩\n","    - 憬\n","    - 憷\n","    - 憾\n","    - 懂\n","    - 懈\n","    - 懊\n","    - 懋\n","    - 懑\n","    - 懒\n","    - 懦\n","    - 懵\n","    - 懿\n","    - 戈\n","    - 戊\n","    - 戌\n","    - 戍\n","    - 戎\n","    - 戏\n","    - 成\n","    - 我\n","    - 戒\n","    - 或\n","    - 戗\n","    - 战\n","    - 戚\n","    - 戛\n","    - 戟\n","    - 截\n","    - 戬\n","    - 戮\n","    - 戳\n","    - 戴\n","    - 户\n","    - 戾\n","    - 房\n","    - 所\n","    - 扁\n","    - 扇\n","    - 扈\n","    - 扉\n","    - 手\n","    - 才\n","    - 扎\n","    - 扑\n","    - 扒\n","    - 打\n","    - 扔\n","    - 托\n","    - 扛\n","    - 扞\n","    - 扣\n","    - 扦\n","    - 执\n","    - 扩\n","    - 扪\n","    - 扫\n","    - 扬\n","    - 扭\n","    - 扮\n","    - 扯\n","    - 扰\n","    - 扳\n","    - 扶\n","    - 批\n","    - 扼\n","    - 找\n","    - 承\n","    - 技\n","    - 抄\n","    - 抉\n","    - 把\n","    - 抑\n","    - 抒\n","    - 抓\n","    - 投\n","    - 抖\n","    - 抗\n","    - 折\n","    - 抚\n","    - 抛\n","    - 抠\n","    - 抡\n","    - 抢\n","    - 护\n","    - 报\n","    - 抨\n","    - 披\n","    - 抬\n","    - 抱\n","    - 抵\n","    - 抹\n","    - 押\n","    - 抽\n","    - 抿\n","    - 拂\n","    - 拄\n","    - 担\n","    - 拆\n","    - 拇\n","    - 拈\n","    - 拉\n","    - 拌\n","    - 拍\n","    - 拎\n","    - 拐\n","    - 拒\n","    - 拓\n","    - 拔\n","    - 拖\n","    - 拗\n","    - 拘\n","    - 拙\n","    - 拚\n","    - 招\n","    - 拜\n","    - 拟\n","    - 拢\n","    - 拣\n","    - 拥\n","    - 拦\n","    - 拧\n","    - 拨\n","    - 择\n","    - 括\n","    - 拭\n","    - 拮\n","    - 拯\n","    - 拱\n","    - 拳\n","    - 拴\n","    - 拷\n","    - 拼\n","    - 拽\n","    - 拾\n","    - 拿\n","    - 持\n","    - 挂\n","    - 指\n","    - 按\n","    - 挎\n","    - 挑\n","    - 挖\n","    - 挚\n","    - 挛\n","    - 挝\n","    - 挞\n","    - 挟\n","    - 挠\n","    - 挡\n","    - 挣\n","    - 挤\n","    - 挥\n","    - 挨\n","    - 挪\n","    - 挫\n","    - 振\n","    - 挺\n","    - 挽\n","    - 捂\n","    - 捅\n","    - 捆\n","    - 捉\n","    - 捋\n","    - 捌\n","    - 捍\n","    - 捎\n","    - 捏\n","    - 捐\n","    - 捕\n","    - 捞\n","    - 损\n","    - 捡\n","    - 换\n","    - 捣\n","    - 捧\n","    - 据\n","    - 捶\n","    - 捷\n","    - 捺\n","    - 捻\n","    - 掀\n","    - 掂\n","    - 掇\n","    - 授\n","    - 掉\n","    - 掌\n","    - 掏\n","    - 掐\n","    - 排\n","    - 掖\n","    - 掘\n","    - 掠\n","    - 探\n","    - 掣\n","    - 接\n","    - 控\n","    - 推\n","    - 掩\n","    - 措\n","    - 掬\n","    - 掮\n","    - 掰\n","    - 掳\n","    - 掴\n","    - 掷\n","    - 掸\n","    - 掺\n","    - 揄\n","    - 揉\n","    - 揍\n","    - 描\n","    - 提\n","    - 插\n","    - 握\n","    - 揣\n","    - 揩\n","    - 揪\n","    - 揭\n","    - 援\n","    - 揶\n","    - 揽\n","    - 搀\n","    - 搁\n","    - 搂\n","    - 搅\n","    - 搏\n","    - 搐\n","    - 搓\n","    - 搔\n","    - 搜\n","    - 搞\n","    - 搡\n","    - 搧\n","    - 搪\n","    - 搬\n","    - 搭\n","    - 携\n","    - 搽\n","    - 摁\n","    - 摄\n","    - 摆\n","    - 摇\n","    - 摈\n","    - 摊\n","    - 摒\n","    - 摔\n","    - 摘\n","    - 摞\n","    - 摧\n","    - 摩\n","    - 摸\n","    - 摹\n","    - 撂\n","    - 撅\n","    - 撇\n","    - 撑\n","    - 撒\n","    - 撕\n","    - 撞\n","    - 撤\n","    - 撩\n","    - 撬\n","    - 播\n","    - 撮\n","    - 撰\n","    - 撵\n","    - 撸\n","    - 撺\n","    - 撼\n","    - 擀\n","    - 擂\n","    - 擅\n","    - 操\n","    - 擎\n","    - 擒\n","    - 擘\n","    - 擞\n","    - 擢\n","    - 擦\n","    - 攀\n","    - 攒\n","    - 攘\n","    - 攥\n","    - 攫\n","    - 支\n","    - 收\n","    - 攸\n","    - 改\n","    - 攻\n","    - 放\n","    - 政\n","    - 故\n","    - 效\n","    - 敌\n","    - 敏\n","    - 救\n","    - 敕\n","    - 敖\n","    - 教\n","    - 敛\n","    - 敝\n","    - 敞\n","    - 敢\n","    - 散\n","    - 敦\n","    - 敬\n","    - 数\n","    - 敲\n","    - 整\n","    - 敷\n","    - 文\n","    - 斋\n","    - 斌\n","    - 斐\n","    - 斑\n","    - 斓\n","    - 斗\n","    - 料\n","    - 斛\n","    - 斜\n","    - 斟\n","    - 斡\n","    - 斤\n","    - 斥\n","    - 斧\n","    - 斩\n","    - 断\n","    - 斯\n","    - 新\n","    - 方\n","    - 施\n","    - 旁\n","    - 旅\n","    - 旋\n","    - 旌\n","    - 族\n","    - 旖\n","    - 旗\n","    - 无\n","    - 既\n","    - 日\n","    - 旦\n","    - 旧\n","    - 旨\n","    - 早\n","    - 旬\n","    - 旭\n","    - 旮\n","    - 旯\n","    - 旱\n","    - 时\n","    - 旷\n","    - 旺\n","    - 旻\n","    - 昀\n","    - 昂\n","    - 昆\n","    - 昊\n","    - 昌\n","    - 明\n","    - 昏\n","    - 易\n","    - 昔\n","    - 昕\n","    - 昙\n","    - 昝\n","    - 星\n","    - 映\n","    - 春\n","    - 昧\n","    - 昨\n","    - 昭\n","    - 是\n","    - 昱\n","    - 昴\n","    - 昵\n","    - 昶\n","    - 昼\n","    - 显\n","    - 晃\n","    - 晋\n","    - 晌\n","    - 晏\n","    - 晒\n","    - 晓\n","    - 晔\n","    - 晕\n","    - 晖\n","    - 晗\n","    - 晚\n","    - 晞\n","    - 晟\n","    - 晤\n","    - 晦\n","    - 晨\n","    - 普\n","    - 景\n","    - 晰\n","    - 晴\n","    - 晶\n","    - 晷\n","    - 智\n","    - 晾\n","    - 暂\n","    - 暄\n","    - 暇\n","    - 暌\n","    - 暑\n","    - 暖\n","    - 暗\n","    - 暧\n","    - 暨\n","    - 暮\n","    - 暴\n","    - 暹\n","    - 暾\n","    - 曈\n","    - 曙\n","    - 曜\n","    - 曝\n","    - 曦\n","    - 曰\n","    - 曲\n","    - 曳\n","    - 更\n","    - 曹\n","    - 曼\n","    - 曾\n","    - 替\n","    - 最\n","    - 月\n","    - 有\n","    - 朋\n","    - 服\n","    - 朐\n","    - 朔\n","    - 朕\n","    - 朗\n","    - 望\n","    - 朝\n","    - 期\n","    - 朦\n","    - 木\n","    - 未\n","    - 末\n","    - 本\n","    - 札\n","    - 术\n","    - 朱\n","    - 朴\n","    - 朵\n","    - 机\n","    - 朽\n","    - 杀\n","    - 杂\n","    - 权\n","    - 杆\n","    - 杈\n","    - 杉\n","    - 李\n","    - 杏\n","    - 材\n","    - 村\n","    - 杓\n","    - 杖\n","    - 杜\n","    - 杞\n","    - 束\n","    - 杠\n","    - 条\n","    - 来\n","    - 杨\n","    - 杭\n","    - 杯\n","    - 杰\n","    - 杳\n","    - 杵\n","    - 杷\n","    - 松\n","    - 板\n","    - 极\n","    - 构\n","    - 枇\n","    - 枉\n","    - 枋\n","    - 析\n","    - 枕\n","    - 林\n","    - 枚\n","    - 果\n","    - 枝\n","    - 枞\n","    - 枢\n","    - 枣\n","    - 枥\n","    - 枪\n","    - 枫\n","    - 枭\n","    - 枯\n","    - 枰\n","    - 枳\n","    - 架\n","    - 枷\n","    - 枸\n","    - 柃\n","    - 柄\n","    - 柏\n","    - 某\n","    - 柑\n","    - 柒\n","    - 染\n","    - 柔\n","    - 柘\n","    - 柚\n","    - 柜\n","    - 柞\n","    - 柠\n","    - 查\n","    - 柩\n","    - 柬\n","    - 柯\n","    - 柱\n","    - 柳\n","    - 柴\n","    - 柿\n","    - 栀\n","    - 栅\n","    - 标\n","    - 栈\n","    - 栋\n","    - 栌\n","    - 栎\n","    - 栏\n","    - 树\n","    - 栓\n","    - 栖\n","    - 栗\n","    - 校\n","    - 栩\n","    - 株\n","    - 样\n","    - 核\n","    - 根\n","    - 格\n","    - 栽\n","    - 栾\n","    - 桁\n","    - 桂\n","    - 桃\n","    - 框\n","    - 案\n","    - 桉\n","    - 桌\n","    - 桎\n","    - 桐\n","    - 桑\n","    - 桓\n","    - 桔\n","    - 桠\n","    - 桢\n","    - 档\n","    - 桥\n","    - 桦\n","    - 桨\n","    - 桩\n","    - 桴\n","    - 桶\n","    - 桷\n","    - 梁\n","    - 梅\n","    - 梆\n","    - 梏\n","    - 梓\n","    - 梗\n","    - 梢\n","    - 梦\n","    - 梧\n","    - 梨\n","    - 梭\n","    - 梯\n","    - 械\n","    - 梳\n","    - 梵\n","    - 检\n","    - 棂\n","    - 棉\n","    - 棋\n","    - 棍\n","    - 棒\n","    - 棕\n","    - 棘\n","    - 棚\n","    - 棠\n","    - 棣\n","    - 森\n","    - 棱\n","    - 棵\n","    - 棺\n","    - 椁\n","    - 椅\n","    - 椋\n","    - 植\n","    - 椎\n","    - 椒\n","    - 椟\n","    - 椤\n","    - 椭\n","    - 椰\n","    - 椴\n","    - 椹\n","    - 椿\n","    - 楂\n","    - 楔\n","    - 楚\n","    - 楞\n","    - 楠\n","    - 楣\n","    - 楷\n","    - 楸\n","    - 楼\n","    - 概\n","    - 榄\n","    - 榆\n","    - 榈\n","    - 榉\n","    - 榔\n","    - 榕\n","    - 榛\n","    - 榜\n","    - 榨\n","    - 榫\n","    - 榭\n","    - 榴\n","    - 榷\n","    - 榻\n","    - 槃\n","    - 槌\n","    - 槎\n","    - 槐\n","    - 槛\n","    - 槟\n","    - 槭\n","    - 槽\n","    - 槿\n","    - 樊\n","    - 樟\n","    - 模\n","    - 樨\n","    - 横\n","    - 樯\n","    - 樱\n","    - 樵\n","    - 樽\n","    - 樾\n","    - 橄\n","    - 橇\n","    - 橐\n","    - 橘\n","    - 橙\n","    - 橡\n","    - 橱\n","    - 檀\n","    - 檐\n","    - 檗\n","    - 檬\n","    - 欠\n","    - 次\n","    - 欢\n","    - 欣\n","    - 欧\n","    - 欲\n","    - 欸\n","    - 欺\n","    - 款\n","    - 歆\n","    - 歇\n","    - 歉\n","    - 歌\n","    - 歙\n","    - 止\n","    - 正\n","    - 此\n","    - 步\n","    - 武\n","    - 歧\n","    - 歩\n","    - 歪\n","    - 歹\n","    - 死\n","    - 歼\n","    - 殁\n","    - 殃\n","    - 殆\n","    - 殇\n","    - 殉\n","    - 殊\n","    - 残\n","    - 殒\n","    - 殓\n","    - 殖\n","    - 殚\n","    - 殡\n","    - 殴\n","    - 段\n","    - 殷\n","    - 殿\n","    - 毁\n","    - 毂\n","    - 毅\n","    - 毋\n","    - 母\n","    - 每\n","    - 毒\n","    - 毓\n","    - 比\n","    - 毕\n","    - 毗\n","    - 毙\n","    - 毛\n","    - 毡\n","    - 毫\n","    - 毯\n","    - 毽\n","    - 氏\n","    - 民\n","    - 氓\n","    - 气\n","    - 氚\n","    - 氛\n","    - 氟\n","    - 氢\n","    - 氤\n","    - 氦\n","    - 氧\n","    - 氨\n","    - 氪\n","    - 氮\n","    - 氯\n","    - 氰\n","    - 氲\n","    - 水\n","    - 永\n","    - 汀\n","    - 汁\n","    - 求\n","    - 汇\n","    - 汉\n","    - 汊\n","    - 汐\n","    - 汕\n","    - 汗\n","    - 汛\n","    - 汝\n","    - 汞\n","    - 江\n","    - 池\n","    - 污\n","    - 汤\n","    - 汨\n","    - 汩\n","    - 汪\n","    - 汰\n","    - 汲\n","    - 汴\n","    - 汶\n","    - 汹\n","    - 汽\n","    - 汾\n","    - 沁\n","    - 沂\n","    - 沃\n","    - 沅\n","    - 沈\n","    - 沉\n","    - 沌\n","    - 沏\n","    - 沐\n","    - 沓\n","    - 沙\n","    - 沛\n","    - 沟\n","    - 没\n","    - 沢\n","    - 沣\n","    - 沥\n","    - 沦\n","    - 沧\n","    - 沪\n","    - 沫\n","    - 沭\n","    - 沮\n","    - 沱\n","    - 河\n","    - 沸\n","    - 油\n","    - 治\n","    - 沼\n","    - 沽\n","    - 沾\n","    - 沿\n","    - 泄\n","    - 泉\n","    - 泊\n","    - 泌\n","    - 泓\n","    - 泔\n","    - 法\n","    - 泖\n","    - 泗\n","    - 泛\n","    - 泞\n","    - 泠\n","    - 泡\n","    - 波\n","    - 泣\n","    - 泥\n","    - 注\n","    - 泪\n","    - 泫\n","    - 泮\n","    - 泯\n","    - 泰\n","    - 泱\n","    - 泳\n","    - 泵\n","    - 泷\n","    - 泸\n","    - 泺\n","    - 泻\n","    - 泼\n","    - 泽\n","    - 泾\n","    - 洁\n","    - 洋\n","    - 洒\n","    - 洗\n","    - 洙\n","    - 洛\n","    - 洞\n","    - 津\n","    - 洪\n","    - 洮\n","    - 洱\n","    - 洲\n","    - 洵\n","    - 洹\n","    - 洺\n","    - 活\n","    - 洼\n","    - 洽\n","    - 派\n","    - 流\n","    - 浃\n","    - 浅\n","    - 浆\n","    - 浇\n","    - 浈\n","    - 浊\n","    - 测\n","    - 济\n","    - 浏\n","    - 浐\n","    - 浑\n","    - 浒\n","    - 浓\n","    - 浔\n","    - 浙\n","    - 浚\n","    - 浜\n","    - 浠\n","    - 浣\n","    - 浦\n","    - 浩\n","    - 浪\n","    - 浮\n","    - 浴\n","    - 海\n","    - 浸\n","    - 涂\n","    - 涅\n","    - 消\n","    - 涉\n","    - 涌\n","    - 涎\n","    - 涑\n","    - 涓\n","    - 涕\n","    - 涛\n","    - 涝\n","    - 涞\n","    - 涟\n","    - 涠\n","    - 涡\n","    - 涣\n","    - 涤\n","    - 润\n","    - 涧\n","    - 涨\n","    - 涩\n","    - 涪\n","    - 涮\n","    - 涯\n","    - 液\n","    - 涵\n","    - 涸\n","    - 涿\n","    - 淀\n","    - 淄\n","    - 淅\n","    - 淆\n","    - 淇\n","    - 淋\n","    - 淌\n","    - 淑\n","    - 淖\n","    - 淘\n","    - 淝\n","    - 淞\n","    - 淡\n","    - 淤\n","    - 淦\n","    - 淫\n","    - 淬\n","    - 淮\n","    - 深\n","    - 淳\n","    - 混\n","    - 淹\n","    - 添\n","    - 淼\n","    - 清\n","    - 渊\n","    - 渌\n","    - 渍\n","    - 渎\n","    - 渐\n","    - 渑\n","    - 渔\n","    - 渗\n","    - 渚\n","    - 渝\n","    - 渠\n","    - 渡\n","    - 渣\n","    - 渤\n","    - 渥\n","    - 温\n","    - 渭\n","    - 港\n","    - 渲\n","    - 渴\n","    - 游\n","    - 渺\n","    - 湃\n","    - 湄\n","    - 湉\n","    - 湍\n","    - 湎\n","    - 湖\n","    - 湘\n","    - 湛\n","    - 湫\n","    - 湾\n","    - 湿\n","    - 溃\n","    - 溅\n","    - 溆\n","    - 溉\n","    - 溏\n","    - 源\n","    - 溜\n","    - 溟\n","    - 溢\n","    - 溥\n","    - 溧\n","    - 溪\n","    - 溯\n","    - 溶\n","    - 溺\n","    - 滁\n","    - 滇\n","    - 滋\n","    - 滑\n","    - 滔\n","    - 滕\n","    - 滘\n","    - 滚\n","    - 滞\n","    - 满\n","    - 滢\n","    - 滤\n","    - 滥\n","    - 滦\n","    - 滨\n","    - 滩\n","    - 滴\n","    - 滹\n","    - 漂\n","    - 漆\n","    - 漉\n","    - 漏\n","    - 漓\n","    - 演\n","    - 漕\n","    - 漠\n","    - 漩\n","    - 漪\n","    - 漫\n","    - 漭\n","    - 漯\n","    - 漱\n","    - 漳\n","    - 漾\n","    - 潆\n","    - 潇\n","    - 潋\n","    - 潍\n","    - 潘\n","    - 潜\n","    - 潞\n","    - 潢\n","    - 潦\n","    - 潭\n","    - 潮\n","    - 潸\n","    - 潺\n","    - 潼\n","    - 澄\n","    - 澈\n","    - 澍\n","    - 澎\n","    - 澜\n","    - 澡\n","    - 澧\n","    - 澳\n","    - 澶\n","    - 激\n","    - 濂\n","    - 濑\n","    - 濒\n","    - 濠\n","    - 濡\n","    - 濮\n","    - 濯\n","    - 瀑\n","    - 瀚\n","    - 瀛\n","    - 灌\n","    - 灏\n","    - 灞\n","    - 火\n","    - 灭\n","    - 灯\n","    - 灰\n","    - 灵\n","    - 灶\n","    - 灸\n","    - 灼\n","    - 灾\n","    - 灿\n","    - 炀\n","    - 炅\n","    - 炉\n","    - 炊\n","    - 炎\n","    - 炒\n","    - 炔\n","    - 炕\n","    - 炖\n","    - 炙\n","    - 炜\n","    - 炫\n","    - 炬\n","    - 炭\n","    - 炮\n","    - 炯\n","    - 炳\n","    - 炷\n","    - 炸\n","    - 点\n","    - 炼\n","    - 炽\n","    - 烀\n","    - 烁\n","    - 烂\n","    - 烃\n","    - 烈\n","    - 烊\n","    - 烘\n","    - 烙\n","    - 烛\n","    - 烟\n","    - 烤\n","    - 烦\n","    - 烧\n","    - 烨\n","    - 烩\n","    - 烫\n","    - 烬\n","    - 热\n","    - 烯\n","    - 烷\n","    - 烹\n","    - 烽\n","    - 焉\n","    - 焊\n","    - 焓\n","    - 焕\n","    - 焖\n","    - 焗\n","    - 焘\n","    - 焙\n","    - 焚\n","    - 焦\n","    - 焯\n","    - 焰\n","    - 焱\n","    - 然\n","    - 煊\n","    - 煌\n","    - 煎\n","    - 煜\n","    - 煞\n","    - 煤\n","    - 煦\n","    - 照\n","    - 煨\n","    - 煮\n","    - 煲\n","    - 煳\n","    - 煽\n","    - 熄\n","    - 熊\n","    - 熏\n","    - 熔\n","    - 熙\n","    - 熟\n","    - 熠\n","    - 熨\n","    - 熬\n","    - 熵\n","    - 熹\n","    - 燃\n","    - 燊\n","    - 燎\n","    - 燕\n","    - 燥\n","    - 燮\n","    - 爆\n","    - 爪\n","    - 爬\n","    - 爱\n","    - 爵\n","    - 父\n","    - 爷\n","    - 爸\n","    - 爹\n","    - 爽\n","    - 片\n","    - 版\n","    - 牌\n","    - 牍\n","    - 牒\n","    - 牙\n","    - 牛\n","    - 牟\n","    - 牠\n","    - 牡\n","    - 牢\n","    - 牧\n","    - 物\n","    - 牲\n","    - 牵\n","    - 特\n","    - 牺\n","    - 牾\n","    - 犀\n","    - 犁\n","    - 犄\n","    - 犇\n","    - 犊\n","    - 犒\n","    - 犟\n","    - 犬\n","    - 犯\n","    - 状\n","    - 犷\n","    - 犸\n","    - 犹\n","    - 狂\n","    - 狄\n","    - 狈\n","    - 狐\n","    - 狒\n","    - 狗\n","    - 狙\n","    - 狞\n","    - 狠\n","    - 狡\n","    - 狩\n","    - 独\n","    - 狭\n","    - 狮\n","    - 狰\n","    - 狱\n","    - 狸\n","    - 狼\n","    - 猁\n","    - 猎\n","    - 猖\n","    - 猛\n","    - 猜\n","    - 猝\n","    - 猥\n","    - 猩\n","    - 猪\n","    - 猫\n","    - 猬\n","    - 献\n","    - 猴\n","    - 猷\n","    - 猹\n","    - 猾\n","    - 猿\n","    - 獒\n","    - 獗\n","    - 獭\n","    - 獾\n","    - 玄\n","    - 率\n","    - 玉\n","    - 王\n","    - 玑\n","    - 玖\n","    - 玛\n","    - 玟\n","    - 玥\n","    - 玩\n","    - 玫\n","    - 玮\n","    - 环\n","    - 现\n","    - 玲\n","    - 玳\n","    - 玷\n","    - 玹\n","    - 玺\n","    - 玻\n","    - 珀\n","    - 珂\n","    - 珈\n","    - 珉\n","    - 珊\n","    - 珍\n","    - 珏\n","    - 珑\n","    - 珙\n","    - 珞\n","    - 珠\n","    - 珥\n","    - 班\n","    - 珮\n","    - 珲\n","    - 珺\n","    - 球\n","    - 琅\n","    - 理\n","    - 琉\n","    - 琊\n","    - 琏\n","    - 琐\n","    - 琛\n","    - 琢\n","    - 琤\n","    - 琥\n","    - 琦\n","    - 琨\n","    - 琪\n","    - 琬\n","    - 琮\n","    - 琰\n","    - 琳\n","    - 琴\n","    - 琵\n","    - 琶\n","    - 琼\n","    - 瑁\n","    - 瑄\n","    - 瑕\n","    - 瑙\n","    - 瑚\n","    - 瑛\n","    - 瑜\n","    - 瑞\n","    - 瑟\n","    - 瑠\n","    - 瑭\n","    - 瑰\n","    - 瑶\n","    - 瑷\n","    - 瑾\n","    - 璀\n","    - 璃\n","    - 璇\n","    - 璋\n","    - 璐\n","    - 璞\n","    - 璟\n","    - 璧\n","    - 璨\n","    - 瓜\n","    - 瓢\n","    - 瓣\n","    - 瓦\n","    - 瓮\n","    - 瓯\n","    - 瓶\n","    - 瓷\n","    - 甄\n","    - 甘\n","    - 甚\n","    - 甜\n","    - 生\n","    - 甥\n","    - 用\n","    - 甩\n","    - 甫\n","    - 甬\n","    - 甭\n","    - 田\n","    - 由\n","    - 甲\n","    - 申\n","    - 电\n","    - 男\n","    - 甸\n","    - 町\n","    - 画\n","    - 畅\n","    - 畈\n","    - 畊\n","    - 界\n","    - 畏\n","    - 畔\n","    - 留\n","    - 畜\n","    - 略\n","    - 番\n","    - 畴\n","    - 畸\n","    - 畿\n","    - 疃\n","    - 疆\n","    - 疏\n","    - 疑\n","    - 疖\n","    - 疗\n","    - 疙\n","    - 疚\n","    - 疝\n","    - 疟\n","    - 疡\n","    - 疣\n","    - 疤\n","    - 疫\n","    - 疮\n","    - 疯\n","    - 疱\n","    - 疲\n","    - 疴\n","    - 疵\n","    - 疸\n","    - 疹\n","    - 疼\n","    - 疽\n","    - 疾\n","    - 病\n","    - 症\n","    - 痉\n","    - 痊\n","    - 痍\n","    - 痒\n","    - 痔\n","    - 痕\n","    - 痘\n","    - 痛\n","    - 痞\n","    - 痢\n","    - 痣\n","    - 痧\n","    - 痨\n","    - 痪\n","    - 痫\n","    - 痰\n","    - 痱\n","    - 痴\n","    - 痹\n","    - 痼\n","    - 瘀\n","    - 瘁\n","    - 瘙\n","    - 瘟\n","    - 瘠\n","    - 瘢\n","    - 瘤\n","    - 瘦\n","    - 瘩\n","    - 瘪\n","    - 瘫\n","    - 瘳\n","    - 瘴\n","    - 瘸\n","    - 瘾\n","    - 癌\n","    - 癖\n","    - 癜\n","    - 癞\n","    - 癣\n","    - 癫\n","    - 登\n","    - 白\n","    - 百\n","    - 皂\n","    - 的\n","    - 皆\n","    - 皇\n","    - 皋\n","    - 皎\n","    - 皑\n","    - 皓\n","    - 皖\n","    - 皙\n","    - 皮\n","    - 皱\n","    - 皿\n","    - 盂\n","    - 盅\n","    - 盆\n","    - 盈\n","    - 益\n","    - 盎\n","    - 盏\n","    - 盐\n","    - 监\n","    - 盒\n","    - 盔\n","    - 盖\n","    - 盗\n","    - 盘\n","    - 盛\n","    - 盟\n","    - 目\n","    - 盯\n","    - 盱\n","    - 盲\n","    - 直\n","    - 相\n","    - 盹\n","    - 盼\n","    - 盾\n","    - 省\n","    - 眈\n","    - 眉\n","    - 看\n","    - 眙\n","    - 真\n","    - 眠\n","    - 眨\n","    - 眩\n","    - 眬\n","    - 眯\n","    - 眶\n","    - 眷\n","    - 眸\n","    - 眺\n","    - 眼\n","    - 着\n","    - 睁\n","    - 睇\n","    - 睐\n","    - 睑\n","    - 睛\n","    - 睡\n","    - 睢\n","    - 督\n","    - 睦\n","    - 睫\n","    - 睬\n","    - 睹\n","    - 睽\n","    - 睾\n","    - 睿\n","    - 瞄\n","    - 瞅\n","    - 瞌\n","    - 瞎\n","    - 瞑\n","    - 瞒\n","    - 瞟\n","    - 瞠\n","    - 瞥\n","    - 瞧\n","    - 瞩\n","    - 瞪\n","    - 瞬\n","    - 瞭\n","    - 瞰\n","    - 瞳\n","    - 瞻\n","    - 瞿\n","    - 矍\n","    - 矗\n","    - 矛\n","    - 矜\n","    - 矢\n","    - 矣\n","    - 知\n","    - 矩\n","    - 矫\n","    - 矬\n","    - 短\n","    - 矮\n","    - 石\n","    - 矶\n","    - 矸\n","    - 矽\n","    - 矾\n","    - 矿\n","    - 砀\n","    - 码\n","    - 砂\n","    - 砌\n","    - 砍\n","    - 砒\n","    - 研\n","    - 砖\n","    - 砚\n","    - 砝\n","    - 砣\n","    - 砥\n","    - 砭\n","    - 砰\n","    - 破\n","    - 砷\n","    - 砸\n","    - 砺\n","    - 砼\n","    - 砾\n","    - 础\n","    - 硅\n","    - 硌\n","    - 硒\n","    - 硕\n","    - 硖\n","    - 硚\n","    - 硝\n","    - 硫\n","    - 硬\n","    - 确\n","    - 硼\n","    - 碉\n","    - 碌\n","    - 碍\n","    - 碎\n","    - 碑\n","    - 碓\n","    - 碗\n","    - 碘\n","    - 碚\n","    - 碜\n","    - 碟\n","    - 碣\n","    - 碧\n","    - 碰\n","    - 碱\n","    - 碳\n","    - 碴\n","    - 碾\n","    - 磁\n","    - 磅\n","    - 磊\n","    - 磋\n","    - 磐\n","    - 磕\n","    - 磨\n","    - 磴\n","    - 磷\n","    - 磺\n","    - 礁\n","    - 示\n","    - 礼\n","    - 社\n","    - 祀\n","    - 祁\n","    - 祈\n","    - 祉\n","    - 祎\n","    - 祐\n","    - 祖\n","    - 祚\n","    - 祛\n","    - 祝\n","    - 神\n","    - 祟\n","    - 祠\n","    - 祢\n","    - 祥\n","    - 票\n","    - 祭\n","    - 祯\n","    - 祷\n","    - 祸\n","    - 祺\n","    - 禀\n","    - 禁\n","    - 禄\n","    - 禅\n","    - 福\n","    - 禧\n","    - 禹\n","    - 禺\n","    - 离\n","    - 禽\n","    - 禾\n","    - 秀\n","    - 私\n","    - 秃\n","    - 秆\n","    - 秉\n","    - 秋\n","    - 种\n","    - 科\n","    - 秒\n","    - 秘\n","    - 租\n","    - 秣\n","    - 秤\n","    - 秦\n","    - 秧\n","    - 秩\n","    - 积\n","    - 称\n","    - 秸\n","    - 移\n","    - 秽\n","    - 稀\n","    - 程\n","    - 稍\n","    - 税\n","    - 稔\n","    - 稚\n","    - 稞\n","    - 稠\n","    - 稣\n","    - 稳\n","    - 稷\n","    - 稹\n","    - 稻\n","    - 稼\n","    - 稽\n","    - 稿\n","    - 穆\n","    - 穗\n","    - 穴\n","    - 究\n","    - 穷\n","    - 穹\n","    - 空\n","    - 穿\n","    - 突\n","    - 窃\n","    - 窄\n","    - 窈\n","    - 窍\n","    - 窑\n","    - 窒\n","    - 窕\n","    - 窖\n","    - 窗\n","    - 窘\n","    - 窜\n","    - 窝\n","    - 窟\n","    - 窠\n","    - 窥\n","    - 窦\n","    - 窨\n","    - 窿\n","    - 立\n","    - 竖\n","    - 站\n","    - 竞\n","    - 竟\n","    - 章\n","    - 竣\n","    - 童\n","    - 竭\n","    - 端\n","    - 竹\n","    - 竺\n","    - 竽\n","    - 竿\n","    - 笃\n","    - 笆\n","    - 笈\n","    - 笋\n","    - 笑\n","    - 笔\n","    - 笙\n","    - 笛\n","    - 笠\n","    - 符\n","    - 笨\n","    - 第\n","    - 笳\n","    - 笸\n","    - 笼\n","    - 等\n","    - 筋\n","    - 筏\n","    - 筐\n","    - 筑\n","    - 筒\n","    - 答\n","    - 策\n","    - 筛\n","    - 筝\n","    - 筠\n","    - 筱\n","    - 筵\n","    - 筷\n","    - 筹\n","    - 签\n","    - 简\n","    - 箍\n","    - 箔\n","    - 箕\n","    - 算\n","    - 管\n","    - 箩\n","    - 箫\n","    - 箭\n","    - 箱\n","    - 箴\n","    - 篁\n","    - 篆\n","    - 篇\n","    - 篑\n","    - 篓\n","    - 篝\n","    - 篡\n","    - 篦\n","    - 篪\n","    - 篮\n","    - 篱\n","    - 篷\n","    - 篼\n","    - 簇\n","    - 簋\n","    - 簧\n","    - 簪\n","    - 簸\n","    - 簿\n","    - 籁\n","    - 籍\n","    - 米\n","    - 类\n","    - 籼\n","    - 籽\n","    - 粉\n","    - 粑\n","    - 粒\n","    - 粕\n","    - 粗\n","    - 粘\n","    - 粟\n","    - 粤\n","    - 粥\n","    - 粪\n","    - 粮\n","    - 粱\n","    - 粲\n","    - 粳\n","    - 粹\n","    - 粼\n","    - 粽\n","    - 精\n","    - 糊\n","    - 糕\n","    - 糖\n","    - 糗\n","    - 糙\n","    - 糟\n","    - 糠\n","    - 糯\n","    - 系\n","    - 紊\n","    - 素\n","    - 索\n","    - 紧\n","    - 紫\n","    - 累\n","    - 絮\n","    - 綦\n","    - 繁\n","    - 纂\n","    - 纠\n","    - 纡\n","    - 红\n","    - 纣\n","    - 纤\n","    - 约\n","    - 级\n","    - 纨\n","    - 纪\n","    - 纫\n","    - 纬\n","    - 纭\n","    - 纯\n","    - 纰\n","    - 纱\n","    - 纲\n","    - 纳\n","    - 纵\n","    - 纶\n","    - 纷\n","    - 纸\n","    - 纹\n","    - 纺\n","    - 纽\n","    - 纾\n","    - 线\n","    - 绀\n","    - 练\n","    - 组\n","    - 绅\n","    - 细\n","    - 织\n","    - 终\n","    - 绉\n","    - 绊\n","    - 绋\n","    - 绌\n","    - 绍\n","    - 绎\n","    - 经\n","    - 绑\n","    - 绒\n","    - 结\n","    - 绔\n","    - 绕\n","    - 绘\n","    - 给\n","    - 绚\n","    - 绛\n","    - 络\n","    - 绝\n","    - 绞\n","    - 统\n","    - 绢\n","    - 绣\n","    - 绥\n","    - 继\n","    - 绩\n","    - 绪\n","    - 绫\n","    - 续\n","    - 绮\n","    - 绯\n","    - 绰\n","    - 绳\n","    - 维\n","    - 绵\n","    - 绷\n","    - 绸\n","    - 绻\n","    - 综\n","    - 绽\n","    - 绿\n","    - 缀\n","    - 缄\n","    - 缅\n","    - 缆\n","    - 缇\n","    - 缉\n","    - 缎\n","    - 缓\n","    - 缔\n","    - 缕\n","    - 编\n","    - 缘\n","    - 缙\n","    - 缚\n","    - 缛\n","    - 缜\n","    - 缝\n","    - 缠\n","    - 缢\n","    - 缤\n","    - 缨\n","    - 缩\n","    - 缪\n","    - 缬\n","    - 缭\n","    - 缮\n","    - 缰\n","    - 缱\n","    - 缴\n","    - 缸\n","    - 缺\n","    - 罂\n","    - 罄\n","    - 罐\n","    - 网\n","    - 罔\n","    - 罕\n","    - 罗\n","    - 罚\n","    - 罡\n","    - 罢\n","    - 罩\n","    - 罪\n","    - 置\n","    - 署\n","    - 罹\n","    - 羁\n","    - 羊\n","    - 羌\n","    - 美\n","    - 羔\n","    - 羚\n","    - 羞\n","    - 羡\n","    - 群\n","    - 羧\n","    - 羯\n","    - 羲\n","    - 羸\n","    - 羹\n","    - 羽\n","    - 羿\n","    - 翁\n","    - 翅\n","    - 翊\n","    - 翌\n","    - 翎\n","    - 翔\n","    - 翘\n","    - 翟\n","    - 翠\n","    - 翡\n","    - 翩\n","    - 翰\n","    - 翱\n","    - 翻\n","    - 翼\n","    - 耀\n","    - 老\n","    - 考\n","    - 耄\n","    - 者\n","    - 耆\n","    - 耋\n","    - 而\n","    - 耍\n","    - 耐\n","    - 耒\n","    - 耕\n","    - 耗\n","    - 耘\n","    - 耙\n","    - 耜\n","    - 耪\n","    - 耳\n","    - 耶\n","    - 耷\n","    - 耸\n","    - 耻\n","    - 耽\n","    - 耿\n","    - 聂\n","    - 聆\n","    - 聊\n","    - 聋\n","    - 职\n","    - 联\n","    - 聘\n","    - 聚\n","    - 聪\n","    - 肃\n","    - 肆\n","    - 肇\n","    - 肉\n","    - 肋\n","    - 肌\n","    - 肖\n","    - 肘\n","    - 肚\n","    - 肛\n","    - 肝\n","    - 肠\n","    - 股\n","    - 肢\n","    - 肤\n","    - 肥\n","    - 肩\n","    - 肪\n","    - 肮\n","    - 肯\n","    - 肱\n","    - 育\n","    - 肴\n","    - 肺\n","    - 肾\n","    - 肿\n","    - 胀\n","    - 胁\n","    - 胃\n","    - 胆\n","    - 背\n","    - 胎\n","    - 胖\n","    - 胗\n","    - 胚\n","    - 胛\n","    - 胜\n","    - 胞\n","    - 胡\n","    - 胤\n","    - 胥\n","    - 胧\n","    - 胫\n","    - 胭\n","    - 胯\n","    - 胰\n","    - 胱\n","    - 胳\n","    - 胶\n","    - 胸\n","    - 胺\n","    - 能\n","    - 脂\n","    - 脆\n","    - 脉\n","    - 脊\n","    - 脍\n","    - 脏\n","    - 脐\n","    - 脑\n","    - 脓\n","    - 脖\n","    - 脚\n","    - 脯\n","    - 脱\n","    - 脸\n","    - 脾\n","    - 腆\n","    - 腈\n","    - 腊\n","    - 腋\n","    - 腌\n","    - 腐\n","    - 腑\n","    - 腓\n","    - 腔\n","    - 腕\n","    - 腥\n","    - 腩\n","    - 腭\n","    - 腮\n","    - 腰\n","    - 腱\n","    - 腴\n","    - 腹\n","    - 腺\n","    - 腻\n","    - 腼\n","    - 腾\n","    - 腿\n","    - 膀\n","    - 膈\n","    - 膊\n","    - 膏\n","    - 膑\n","    - 膛\n","    - 膜\n","    - 膝\n","    - 膨\n","    - 膳\n","    - 膺\n","    - 臀\n","    - 臂\n","    - 臃\n","    - 臆\n","    - 臊\n","    - 臣\n","    - 臧\n","    - 自\n","    - 臬\n","    - 臭\n","    - 至\n","    - 致\n","    - 臻\n","    - 臼\n","    - 舀\n","    - 舅\n","    - 舆\n","    - 舌\n","    - 舍\n","    - 舐\n","    - 舒\n","    - 舔\n","    - 舛\n","    - 舜\n","    - 舞\n","    - 舟\n","    - 航\n","    - 舫\n","    - 般\n","    - 舰\n","    - 舱\n","    - 舵\n","    - 舶\n","    - 舷\n","    - 舸\n","    - 船\n","    - 艇\n","    - 艋\n","    - 艘\n","    - 艮\n","    - 良\n","    - 艰\n","    - 色\n","    - 艳\n","    - 艺\n","    - 艾\n","    - 艿\n","    - 节\n","    - 芊\n","    - 芋\n","    - 芍\n","    - 芒\n","    - 芗\n","    - 芙\n","    - 芜\n","    - 芝\n","    - 芥\n","    - 芦\n","    - 芩\n","    - 芪\n","    - 芬\n","    - 芭\n","    - 芮\n","    - 芯\n","    - 花\n","    - 芳\n","    - 芷\n","    - 芸\n","    - 芹\n","    - 芽\n","    - 芾\n","    - 苇\n","    - 苋\n","    - 苍\n","    - 苏\n","    - 苑\n","    - 苓\n","    - 苔\n","    - 苗\n","    - 苛\n","    - 苞\n","    - 苟\n","    - 苡\n","    - 苣\n","    - 若\n","    - 苦\n","    - 苫\n","    - 苯\n","    - 英\n","    - 苷\n","    - 苹\n","    - 茁\n","    - 茂\n","    - 范\n","    - 茄\n","    - 茅\n","    - 茆\n","    - 茉\n","    - 茌\n","    - 茎\n","    - 茗\n","    - 茛\n","    - 茜\n","    - 茧\n","    - 茨\n","    - 茫\n","    - 茬\n","    - 茯\n","    - 茱\n","    - 茳\n","    - 茴\n","    - 茵\n","    - 茶\n","    - 茸\n","    - 茹\n","    - 茼\n","    - 荀\n","    - 荃\n","    - 荆\n","    - 荇\n","    - 草\n","    - 荏\n","    - 荐\n","    - 荒\n","    - 荔\n","    - 荚\n","    - 荛\n","    - 荞\n","    - 荟\n","    - 荠\n","    - 荡\n","    - 荣\n","    - 荤\n","    - 荧\n","    - 荨\n","    - 荫\n","    - 药\n","    - 荷\n","    - 荸\n","    - 荻\n","    - 荼\n","    - 莅\n","    - 莆\n","    - 莉\n","    - 莎\n","    - 莒\n","    - 莓\n","    - 莘\n","    - 莜\n","    - 莞\n","    - 莠\n","    - 莪\n","    - 莫\n","    - 莱\n","    - 莲\n","    - 莴\n","    - 获\n","    - 莹\n","    - 莺\n","    - 莽\n","    - 菀\n","    - 菁\n","    - 菅\n","    - 菇\n","    - 菊\n","    - 菌\n","    - 菏\n","    - 菖\n","    - 菘\n","    - 菜\n","    - 菠\n","    - 菡\n","    - 菩\n","    - 菱\n","    - 菲\n","    - 萃\n","    - 萄\n","    - 萋\n","    - 萌\n","    - 萍\n","    - 萎\n","    - 萝\n","    - 萤\n","    - 营\n","    - 萦\n","    - 萧\n","    - 萨\n","    - 萱\n","    - 萸\n","    - 落\n","    - 葆\n","    - 著\n","    - 葚\n","    - 葛\n","    - 葡\n","    - 董\n","    - 葩\n","    - 葫\n","    - 葬\n","    - 葱\n","    - 葳\n","    - 葵\n","    - 葺\n","    - 蒂\n","    - 蒋\n","    - 蒙\n","    - 蒜\n","    - 蒯\n","    - 蒲\n","    - 蒸\n","    - 蒿\n","    - 蓁\n","    - 蓄\n","    - 蓉\n","    - 蓓\n","    - 蓝\n","    - 蓟\n","    - 蓥\n","    - 蓦\n","    - 蓬\n","    - 蓼\n","    - 蔑\n","    - 蔓\n","    - 蔗\n","    - 蔚\n","    - 蔡\n","    - 蔫\n","    - 蔬\n","    - 蔷\n","    - 蔺\n","    - 蔻\n","    - 蔼\n","    - 蔽\n","    - 蕃\n","    - 蕉\n","    - 蕊\n","    - 蕙\n","    - 蕨\n","    - 蕲\n","    - 蕴\n","    - 蕾\n","    - 薄\n","    - 薇\n","    - 薏\n","    - 薛\n","    - 薪\n","    - 薯\n","    - 薰\n","    - 薷\n","    - 藁\n","    - 藉\n","    - 藏\n","    - 藐\n","    - 藓\n","    - 藕\n","    - 藜\n","    - 藠\n","    - 藤\n","    - 藩\n","    - 藻\n","    - 藿\n","    - 蘑\n","    - 蘸\n","    - 虎\n","    - 虏\n","    - 虐\n","    - 虑\n","    - 虔\n","    - 虚\n","    - 虞\n","    - 虫\n","    - 虱\n","    - 虹\n","    - 虻\n","    - 虽\n","    - 虾\n","    - 蚀\n","    - 蚁\n","    - 蚂\n","    - 蚊\n","    - 蚌\n","    - 蚓\n","    - 蚕\n","    - 蚝\n","    - 蚣\n","    - 蚤\n","    - 蚪\n","    - 蚬\n","    - 蚯\n","    - 蚱\n","    - 蚴\n","    - 蛀\n","    - 蛆\n","    - 蛇\n","    - 蛉\n","    - 蛊\n","    - 蛋\n","    - 蛎\n","    - 蛐\n","    - 蛔\n","    - 蛙\n","    - 蛛\n","    - 蛟\n","    - 蛤\n","    - 蛮\n","    - 蛰\n","    - 蛳\n","    - 蛹\n","    - 蛾\n","    - 蜀\n","    - 蜂\n","    - 蜃\n","    - 蜇\n","    - 蜈\n","    - 蜊\n","    - 蜍\n","    - 蜒\n","    - 蜓\n","    - 蜕\n","    - 蜗\n","    - 蜘\n","    - 蜚\n","    - 蜜\n","    - 蜡\n","    - 蜢\n","    - 蜥\n","    - 蜱\n","    - 蜴\n","    - 蜷\n","    - 蜻\n","    - 蜿\n","    - 蝇\n","    - 蝈\n","    - 蝉\n","    - 蝌\n","    - 蝎\n","    - 蝗\n","    - 蝙\n","    - 蝠\n","    - 蝮\n","    - 蝴\n","    - 蝶\n","    - 蝽\n","    - 螂\n","    - 螃\n","    - 螈\n","    - 融\n","    - 螨\n","    - 螳\n","    - 螺\n","    - 蟀\n","    - 蟆\n","    - 蟊\n","    - 蟋\n","    - 蟑\n","    - 蟒\n","    - 蟠\n","    - 蟹\n","    - 蟾\n","    - 蠊\n","    - 蠕\n","    - 蠡\n","    - 蠢\n","    - 血\n","    - 衅\n","    - 行\n","    - 衍\n","    - 衔\n","    - 街\n","    - 衙\n","    - 衡\n","    - 衢\n","    - 衣\n","    - 补\n","    - 表\n","    - 衩\n","    - 衫\n","    - 衬\n","    - 衮\n","    - 衰\n","    - 衲\n","    - 衷\n","    - 袁\n","    - 袂\n","    - 袄\n","    - 袅\n","    - 袈\n","    - 袋\n","    - 袍\n","    - 袒\n","    - 袖\n","    - 袜\n","    - 被\n","    - 袭\n","    - 袱\n","    - 裁\n","    - 裂\n","    - 装\n","    - 裆\n","    - 裔\n","    - 裕\n","    - 裘\n","    - 裙\n","    - 裟\n","    - 裤\n","    - 裨\n","    - 裱\n","    - 裳\n","    - 裴\n","    - 裸\n","    - 裹\n","    - 褂\n","    - 褐\n","    - 褒\n","    - 褓\n","    - 褔\n","    - 褚\n","    - 褛\n","    - 褥\n","    - 褪\n","    - 褴\n","    - 褶\n","    - 襁\n","    - 襄\n","    - 襟\n","    - 西\n","    - 要\n","    - 覃\n","    - 覆\n","    - 见\n","    - 观\n","    - 规\n","    - 觅\n","    - 视\n","    - 览\n","    - 觉\n","    - 觊\n","    - 觎\n","    - 觐\n","    - 觑\n","    - 角\n","    - 觞\n","    - 解\n","    - 觥\n","    - 触\n","    - 言\n","    - 訾\n","    - 詹\n","    - 誉\n","    - 誓\n","    - 警\n","    - 譬\n","    - 计\n","    - 订\n","    - 讣\n","    - 认\n","    - 讥\n","    - 讧\n","    - 讨\n","    - 让\n","    - 讪\n","    - 训\n","    - 议\n","    - 讯\n","    - 记\n","    - 讲\n","    - 讳\n","    - 讴\n","    - 讶\n","    - 讷\n","    - 许\n","    - 讹\n","    - 论\n","    - 讼\n","    - 讽\n","    - 设\n","    - 访\n","    - 诀\n","    - 证\n","    - 诃\n","    - 评\n","    - 诅\n","    - 识\n","    - 诈\n","    - 诉\n","    - 诊\n","    - 诋\n","    - 词\n","    - 诏\n","    - 译\n","    - 诓\n","    - 试\n","    - 诗\n","    - 诘\n","    - 诙\n","    - 诚\n","    - 诛\n","    - 话\n","    - 诞\n","    - 诟\n","    - 诠\n","    - 诡\n","    - 询\n","    - 诣\n","    - 诤\n","    - 该\n","    - 详\n","    - 诧\n","    - 诩\n","    - 诫\n","    - 诬\n","    - 语\n","    - 误\n","    - 诱\n","    - 诲\n","    - 说\n","    - 诵\n","    - 诶\n","    - 请\n","    - 诸\n","    - 诹\n","    - 诺\n","    - 读\n","    - 诽\n","    - 课\n","    - 诿\n","    - 谀\n","    - 谁\n","    - 调\n","    - 谅\n","    - 谆\n","    - 谈\n","    - 谊\n","    - 谋\n","    - 谌\n","    - 谍\n","    - 谎\n","    - 谏\n","    - 谐\n","    - 谑\n","    - 谓\n","    - 谕\n","    - 谖\n","    - 谘\n","    - 谙\n","    - 谚\n","    - 谛\n","    - 谜\n","    - 谟\n","    - 谢\n","    - 谣\n","    - 谤\n","    - 谦\n","    - 谧\n","    - 谨\n","    - 谩\n","    - 谬\n","    - 谭\n","    - 谮\n","    - 谯\n","    - 谱\n","    - 谴\n","    - 谶\n","    - 谷\n","    - 豁\n","    - 豆\n","    - 豇\n","    - 豉\n","    - 豌\n","    - 豚\n","    - 象\n","    - 豢\n","    - 豪\n","    - 豫\n","    - 豹\n","    - 豺\n","    - 貂\n","    - 貅\n","    - 貉\n","    - 貌\n","    - 貔\n","    - 贝\n","    - 贞\n","    - 负\n","    - 贡\n","    - 财\n","    - 责\n","    - 贤\n","    - 败\n","    - 账\n","    - 货\n","    - 质\n","    - 贩\n","    - 贪\n","    - 贫\n","    - 贬\n","    - 购\n","    - 贮\n","    - 贯\n","    - 贰\n","    - 贱\n","    - 贲\n","    - 贴\n","    - 贵\n","    - 贷\n","    - 贸\n","    - 费\n","    - 贺\n","    - 贻\n","    - 贼\n","    - 贾\n","    - 贿\n","    - 赁\n","    - 赂\n","    - 赃\n","    - 资\n","    - 赅\n","    - 赈\n","    - 赉\n","    - 赊\n","    - 赋\n","    - 赌\n","    - 赎\n","    - 赏\n","    - 赐\n","    - 赓\n","    - 赔\n","    - 赖\n","    - 赘\n","    - 赚\n","    - 赛\n","    - 赝\n","    - 赞\n","    - 赠\n","    - 赡\n","    - 赢\n","    - 赣\n","    - 赤\n","    - 赦\n","    - 赫\n","    - 走\n","    - 赳\n","    - 赴\n","    - 赵\n","    - 赶\n","    - 起\n","    - 趁\n","    - 超\n","    - 越\n","    - 趋\n","    - 趟\n","    - 趣\n","    - 足\n","    - 趴\n","    - 趵\n","    - 趸\n","    - 趺\n","    - 趾\n","    - 跃\n","    - 跄\n","    - 跆\n","    - 跋\n","    - 跌\n","    - 跎\n","    - 跑\n","    - 跚\n","    - 跛\n","    - 距\n","    - 跟\n","    - 跤\n","    - 跨\n","    - 跪\n","    - 跬\n","    - 路\n","    - 跳\n","    - 践\n","    - 跶\n","    - 跷\n","    - 跹\n","    - 跺\n","    - 跻\n","    - 踉\n","    - 踊\n","    - 踌\n","    - 踏\n","    - 踝\n","    - 踞\n","    - 踢\n","    - 踩\n","    - 踪\n","    - 踮\n","    - 踯\n","    - 踱\n","    - 踵\n","    - 踹\n","    - 踺\n","    - 蹁\n","    - 蹂\n","    - 蹄\n","    - 蹈\n","    - 蹉\n","    - 蹊\n","    - 蹋\n","    - 蹒\n","    - 蹚\n","    - 蹦\n","    - 蹩\n","    - 蹬\n","    - 蹭\n","    - 蹲\n","    - 蹴\n","    - 蹶\n","    - 蹼\n","    - 蹿\n","    - 躁\n","    - 躅\n","    - 躇\n","    - 躏\n","    - 身\n","    - 躬\n","    - 躯\n","    - 躲\n","    - 躺\n","    - 车\n","    - 轧\n","    - 轨\n","    - 轩\n","    - 轫\n","    - 转\n","    - 轮\n","    - 软\n","    - 轰\n","    - 轱\n","    - 轲\n","    - 轳\n","    - 轴\n","    - 轶\n","    - 轸\n","    - 轻\n","    - 轼\n","    - 载\n","    - 轿\n","    - 较\n","    - 辄\n","    - 辅\n","    - 辆\n","    - 辈\n","    - 辉\n","    - 辊\n","    - 辍\n","    - 辐\n","    - 辑\n","    - 输\n","    - 辕\n","    - 辖\n","    - 辗\n","    - 辘\n","    - 辙\n","    - 辛\n","    - 辜\n","    - 辞\n","    - 辟\n","    - 辣\n","    - 辨\n","    - 辩\n","    - 辫\n","    - 辰\n","    - 辱\n","    - 边\n","    - 辽\n","    - 达\n","    - 迁\n","    - 迂\n","    - 迄\n","    - 迅\n","    - 过\n","    - 迈\n","    - 迎\n","    - 运\n","    - 近\n","    - 返\n","    - 还\n","    - 这\n","    - 进\n","    - 远\n","    - 违\n","    - 连\n","    - 迟\n","    - 迢\n","    - 迥\n","    - 迦\n","    - 迩\n","    - 迪\n","    - 迫\n","    - 迭\n","    - 述\n","    - 迷\n","    - 迸\n","    - 迹\n","    - 追\n","    - 退\n","    - 送\n","    - 适\n","    - 逃\n","    - 逅\n","    - 逆\n","    - 选\n","    - 逊\n","    - 逋\n","    - 逍\n","    - 透\n","    - 逐\n","    - 逑\n","    - 递\n","    - 途\n","    - 逗\n","    - 通\n","    - 逛\n","    - 逝\n","    - 逞\n","    - 速\n","    - 造\n","    - 逡\n","    - 逢\n","    - 逮\n","    - 逯\n","    - 逵\n","    - 逸\n","    - 逻\n","    - 逼\n","    - 逾\n","    - 遁\n","    - 遂\n","    - 遇\n","    - 遍\n","    - 遏\n","    - 遐\n","    - 遑\n","    - 道\n","    - 遗\n","    - 遛\n","    - 遢\n","    - 遣\n","    - 遥\n","    - 遨\n","    - 遭\n","    - 遮\n","    - 遴\n","    - 遵\n","    - 避\n","    - 邀\n","    - 邂\n","    - 邃\n","    - 邋\n","    - 邑\n","    - 邓\n","    - 邕\n","    - 邙\n","    - 邛\n","    - 邝\n","    - 邡\n","    - 邢\n","    - 那\n","    - 邦\n","    - 邪\n","    - 邬\n","    - 邮\n","    - 邯\n","    - 邰\n","    - 邱\n","    - 邳\n","    - 邵\n","    - 邸\n","    - 邹\n","    - 邺\n","    - 邻\n","    - 郁\n","    - 郅\n","    - 郇\n","    - 郊\n","    - 郎\n","    - 郑\n","    - 郓\n","    - 郜\n","    - 郝\n","    - 郡\n","    - 郧\n","    - 部\n","    - 郫\n","    - 郭\n","    - 郯\n","    - 郴\n","    - 郸\n","    - 都\n","    - 鄂\n","    - 鄙\n","    - 鄞\n","    - 鄢\n","    - 鄱\n","    - 酉\n","    - 酊\n","    - 酋\n","    - 酌\n","    - 配\n","    - 酐\n","    - 酒\n","    - 酗\n","    - 酚\n","    - 酝\n","    - 酞\n","    - 酣\n","    - 酥\n","    - 酩\n","    - 酪\n","    - 酬\n","    - 酮\n","    - 酯\n","    - 酰\n","    - 酱\n","    - 酵\n","    - 酶\n","    - 酷\n","    - 酸\n","    - 酿\n","    - 醇\n","    - 醉\n","    - 醋\n","    - 醍\n","    - 醐\n","    - 醒\n","    - 醛\n","    - 醺\n","    - 采\n","    - 釉\n","    - 释\n","    - 里\n","    - 重\n","    - 野\n","    - 量\n","    - 金\n","    - 釜\n","    - 鉴\n","    - 銮\n","    - 鏖\n","    - 鑫\n","    - 钇\n","    - 针\n","    - 钉\n","    - 钊\n","    - 钎\n","    - 钏\n","    - 钐\n","    - 钒\n","    - 钓\n","    - 钗\n","    - 钙\n","    - 钛\n","    - 钜\n","    - 钝\n","    - 钞\n","    - 钟\n","    - 钠\n","    - 钢\n","    - 钣\n","    - 钥\n","    - 钦\n","    - 钧\n","    - 钨\n","    - 钩\n","    - 钮\n","    - 钯\n","    - 钰\n","    - 钱\n","    - 钲\n","    - 钳\n","    - 钴\n","    - 钵\n","    - 钻\n","    - 钼\n","    - 钾\n","    - 钿\n","    - 铀\n","    - 铁\n","    - 铂\n","    - 铃\n","    - 铄\n","    - 铅\n","    - 铆\n","    - 铉\n","    - 铋\n","    - 铍\n","    - 铎\n","    - 铐\n","    - 铑\n","    - 铖\n","    - 铛\n","    - 铜\n","    - 铝\n","    - 铟\n","    - 铠\n","    - 铡\n","    - 铣\n","    - 铤\n","    - 铧\n","    - 铨\n","    - 铩\n","    - 铬\n","    - 铭\n","    - 铮\n","    - 铰\n","    - 铲\n","    - 银\n","    - 铷\n","    - 铸\n","    - 铺\n","    - 链\n","    - 铿\n","    - 销\n","    - 锁\n","    - 锂\n","    - 锄\n","    - 锅\n","    - 锆\n","    - 锈\n","    - 锉\n","    - 锋\n","    - 锌\n","    - 锏\n","    - 锐\n","    - 锑\n","    - 锒\n","    - 错\n","    - 锚\n","    - 锟\n","    - 锡\n","    - 锢\n","    - 锣\n","    - 锤\n","    - 锥\n","    - 锦\n","    - 锨\n","    - 锭\n","    - 键\n","    - 锯\n","    - 锰\n","    - 锲\n","    - 锴\n","    - 锵\n","    - 锷\n","    - 锹\n","    - 锻\n","    - 镀\n","    - 镁\n","    - 镂\n","    - 镇\n","    - 镉\n","    - 镊\n","    - 镌\n","    - 镍\n","    - 镏\n","    - 镐\n","    - 镑\n","    - 镔\n","    - 镕\n","    - 镖\n","    - 镜\n","    - 镣\n","    - 镭\n","    - 镯\n","    - 镰\n","    - 镳\n","    - 镶\n","    - 长\n","    - 门\n","    - 闩\n","    - 闪\n","    - 闫\n","    - 闭\n","    - 问\n","    - 闯\n","    - 闰\n","    - 闲\n","    - 闳\n","    - 间\n","    - 闵\n","    - 闷\n","    - 闸\n","    - 闹\n","    - 闺\n","    - 闻\n","    - 闽\n","    - 闾\n","    - 阀\n","    - 阁\n","    - 阂\n","    - 阄\n","    - 阅\n","    - 阆\n","    - 阉\n","    - 阎\n","    - 阐\n","    - 阑\n","    - 阔\n","    - 阕\n","    - 阖\n","    - 阙\n","    - 阚\n","    - 阜\n","    - 队\n","    - 阡\n","    - 阪\n","    - 阮\n","    - 阱\n","    - 防\n","    - 阳\n","    - 阴\n","    - 阵\n","    - 阶\n","    - 阻\n","    - 阿\n","    - 陀\n","    - 陂\n","    - 附\n","    - 际\n","    - 陆\n","    - 陇\n","    - 陈\n","    - 陉\n","    - 陋\n","    - 陌\n","    - 降\n","    - 限\n","    - 陕\n","    - 陛\n","    - 陡\n","    - 院\n","    - 除\n","    - 陨\n","    - 险\n","    - 陪\n","    - 陬\n","    - 陵\n","    - 陶\n","    - 陷\n","    - 隅\n","    - 隆\n","    - 隋\n","    - 隍\n","    - 随\n","    - 隐\n","    - 隔\n","    - 隗\n","    - 隘\n","    - 隙\n","    - 障\n","    - 隧\n","    - 隶\n","    - 隼\n","    - 隽\n","    - 难\n","    - 雀\n","    - 雁\n","    - 雄\n","    - 雅\n","    - 集\n","    - 雇\n","    - 雉\n","    - 雌\n","    - 雍\n","    - 雏\n","    - 雒\n","    - 雕\n","    - 雨\n","    - 雪\n","    - 雯\n","    - 雳\n","    - 零\n","    - 雷\n","    - 雹\n","    - 雾\n","    - 需\n","    - 霁\n","    - 霄\n","    - 霆\n","    - 震\n","    - 霈\n","    - 霉\n","    - 霍\n","    - 霎\n","    - 霏\n","    - 霓\n","    - 霖\n","    - 霜\n","    - 霞\n","    - 霪\n","    - 露\n","    - 霸\n","    - 霹\n","    - 霾\n","    - 靑\n","    - 青\n","    - 靓\n","    - 靖\n","    - 静\n","    - 靛\n","    - 非\n","    - 靠\n","    - 靡\n","    - 面\n","    - 革\n","    - 靳\n","    - 靴\n","    - 靶\n","    - 鞅\n","    - 鞋\n","    - 鞍\n","    - 鞑\n","    - 鞘\n","    - 鞠\n","    - 鞭\n","    - 韦\n","    - 韧\n","    - 韩\n","    - 韫\n","    - 韬\n","    - 韭\n","    - 音\n","    - 韵\n","    - 韶\n","    - 页\n","    - 顶\n","    - 顷\n","    - 项\n","    - 顺\n","    - 须\n","    - 顽\n","    - 顾\n","    - 顿\n","    - 颀\n","    - 颁\n","    - 颂\n","    - 预\n","    - 颅\n","    - 领\n","    - 颇\n","    - 颈\n","    - 颊\n","    - 颌\n","    - 颍\n","    - 颐\n","    - 频\n","    - 颓\n","    - 颖\n","    - 颗\n","    - 题\n","    - 颚\n","    - 颜\n","    - 额\n","    - 颠\n","    - 颢\n","    - 颤\n","    - 颦\n","    - 颧\n","    - 风\n","    - 飒\n","    - 飓\n","    - 飘\n","    - 飙\n","    - 飚\n","    - 飞\n","    - 食\n","    - 飧\n","    - 餍\n","    - 餐\n","    - 餮\n","    - 饕\n","    - 饥\n","    - 饨\n","    - 饪\n","    - 饭\n","    - 饮\n","    - 饯\n","    - 饰\n","    - 饱\n","    - 饲\n","    - 饴\n","    - 饵\n","    - 饶\n","    - 饷\n","    - 饺\n","    - 饼\n","    - 饽\n","    - 饿\n","    - 馀\n","    - 馁\n","    - 馄\n","    - 馅\n","    - 馆\n","    - 馈\n","    - 馊\n","    - 馋\n","    - 馍\n","    - 馏\n","    - 馑\n","    - 馒\n","    - 馕\n","    - 首\n","    - 馗\n","    - 香\n","    - 馥\n","    - 馨\n","    - 马\n","    - 驭\n","    - 驮\n","    - 驯\n","    - 驰\n","    - 驱\n","    - 驳\n","    - 驴\n","    - 驶\n","    - 驷\n","    - 驸\n","    - 驹\n","    - 驻\n","    - 驼\n","    - 驾\n","    - 驿\n","    - 骁\n","    - 骂\n","    - 骄\n","    - 骅\n","    - 骆\n","    - 骇\n","    - 骈\n","    - 骊\n","    - 骋\n","    - 验\n","    - 骏\n","    - 骐\n","    - 骑\n","    - 骓\n","    - 骗\n","    - 骚\n","    - 骛\n","    - 骜\n","    - 骝\n","    - 骞\n","    - 骠\n","    - 骡\n","    - 骤\n","    - 骥\n","    - 骨\n","    - 骰\n","    - 骷\n","    - 骸\n","    - 骺\n","    - 骼\n","    - 髂\n","    - 髅\n","    - 髋\n","    - 髌\n","    - 髓\n","    - 高\n","    - 髦\n","    - 髯\n","    - 鬃\n","    - 鬓\n","    - 鬟\n","    - 鬼\n","    - 魁\n","    - 魂\n","    - 魄\n","    - 魅\n","    - 魇\n","    - 魉\n","    - 魍\n","    - 魏\n","    - 魔\n","    - 魟\n","    - 鱼\n","    - 鱿\n","    - 鲁\n","    - 鲅\n","    - 鲈\n","    - 鲍\n","    - 鲑\n","    - 鲜\n","    - 鲟\n","    - 鲠\n","    - 鲢\n","    - 鲤\n","    - 鲨\n","    - 鲫\n","    - 鲭\n","    - 鲳\n","    - 鲶\n","    - 鲷\n","    - 鲸\n","    - 鲼\n","    - 鳃\n","    - 鳄\n","    - 鳅\n","    - 鳌\n","    - 鳍\n","    - 鳕\n","    - 鳖\n","    - 鳗\n","    - 鳝\n","    - 鳞\n","    - 鳟\n","    - 鸟\n","    - 鸠\n","    - 鸡\n","    - 鸢\n","    - 鸣\n","    - 鸥\n","    - 鸦\n","    - 鸩\n","    - 鸪\n","    - 鸫\n","    - 鸭\n","    - 鸯\n","    - 鸳\n","    - 鸵\n","    - 鸽\n","    - 鸾\n","    - 鸿\n","    - 鹁\n","    - 鹂\n","    - 鹃\n","    - 鹅\n","    - 鹉\n","    - 鹊\n","    - 鹌\n","    - 鹏\n","    - 鹑\n","    - 鹜\n","    - 鹞\n","    - 鹤\n","    - 鹦\n","    - 鹧\n","    - 鹫\n","    - 鹭\n","    - 鹰\n","    - 鹳\n","    - 鹿\n","    - 麂\n","    - 麋\n","    - 麒\n","    - 麓\n","    - 麝\n","    - 麟\n","    - 麦\n","    - 麸\n","    - 麻\n","    - 麾\n","    - 黄\n","    - 黍\n","    - 黎\n","    - 黏\n","    - 黑\n","    - 黔\n","    - 默\n","    - 黛\n","    - 黝\n","    - 黟\n","    - 黯\n","    - 鼎\n","    - 鼓\n","    - 鼠\n","    - 鼬\n","    - 鼹\n","    - 鼻\n","    - 鼾\n","    - 齐\n","    - 齿\n","    - 龃\n","    - 龄\n","    - 龅\n","    - 龈\n","    - 龉\n","    - 龊\n","    - 龌\n","    - 龙\n","    - 龚\n","    - 龟\n","    - 𫖯\n","    - 𫚉\n","    batch_size: 32\n","    shuffle: false\n","    use_start_end_token: false\n","    \n"]},{"output_type":"stream","name":"stdout","text":["[NeMo I 2023-09-18 12:09:09 features:289] PADDING: 16\n","[NeMo I 2023-09-18 12:09:15 save_restore_connector:249] Model EncDecCTCModel was successfully restored from /root/.cache/torch/NeMo/NeMo_1.21.0rc0/stt_zh_citrinet_1024_gamma_0_25/e4a8b1119971335507d9672e03bc80f4/stt_zh_citrinet_1024_gamma_0_25.nemo.\n","[NeMo I 2023-09-18 12:09:15 cloud:68] Downloading from: https://api.ngc.nvidia.com/v2/models/nvidia/nemo/nmt_zh_en_transformer6x6/versions/1.0.0rc1/files/nmt_zh_en_transformer6x6.nemo to /root/.cache/torch/NeMo/NeMo_1.21.0rc0/nmt_zh_en_transformer6x6/eff3792e6f4420ba83436be889e92d79/nmt_zh_en_transformer6x6.nemo\n","[NeMo I 2023-09-18 12:11:52 common:913] Instantiating model from pre-trained checkpoint\n","[NeMo I 2023-09-18 12:12:03 tokenizer_utils:179] Getting YouTokenToMeTokenizer with model: /tmp/tmpnh9p7bhy/tokenizer.decoder.32000.BPE.model with r2l: False.\n","[NeMo I 2023-09-18 12:12:03 tokenizer_utils:179] Getting YouTokenToMeTokenizer with model: /tmp/tmpnh9p7bhy/tokenizer.encoder.32000.BPE.model with r2l: False.\n"]},{"output_type":"stream","name":"stderr","text":["[NeMo W 2023-09-18 12:12:03 modelPT:161] If you intend to do training or fine-tuning, please call the ModelPT.setup_training_data() method and provide a valid configuration file to setup the train data loader.\n","    Train config : \n","    src_file_name: /raid/tarred_data_accaligned_16k_tokens_32k_vocab_cov_0.999/batches.tokens.16000._OP_1..144_CL_.tar\n","    tgt_file_name: /raid/tarred_data_accaligned_16k_tokens_32k_vocab_cov_0.999/batches.tokens.16000._OP_1..144_CL_.tar\n","    tokens_in_batch: 16000\n","    clean: true\n","    max_seq_length: 512\n","    cache_ids: false\n","    cache_data_per_node: false\n","    use_cache: false\n","    shuffle: true\n","    num_samples: -1\n","    drop_last: false\n","    pin_memory: false\n","    num_workers: 8\n","    load_from_cached_dataset: false\n","    reverse_lang_direction: true\n","    load_from_tarred_dataset: true\n","    metadata_path: /raid/tarred_data_accaligned_16k_tokens_32k_vocab_cov_0.999/metadata.json\n","    tar_shuffle_n: 100\n","    \n","[NeMo W 2023-09-18 12:12:03 modelPT:168] If you intend to do validation, please call the ModelPT.setup_validation_data() or ModelPT.setup_multiple_validation_data() method and provide a valid configuration file to setup the validation data loader(s). \n","    Validation config : \n","    src_file_name: /raid/wmt19-zh-en.clean.tok.src\n","    tgt_file_name: /raid/wmt19-zh-en.clean.tok.ref\n","    tokens_in_batch: 512\n","    clean: false\n","    max_seq_length: 512\n","    cache_ids: false\n","    cache_data_per_node: false\n","    use_cache: false\n","    shuffle: false\n","    num_samples: -1\n","    drop_last: false\n","    pin_memory: false\n","    num_workers: 8\n","    load_from_cached_dataset: false\n","    reverse_lang_direction: false\n","    load_from_tarred_dataset: false\n","    metadata_path: null\n","    tar_shuffle_n: 100\n","    \n","[NeMo W 2023-09-18 12:12:03 modelPT:174] Please call the ModelPT.setup_test_data() or ModelPT.setup_multiple_test_data() method and provide a valid configuration file to setup the test data loader(s).\n","    Test config : \n","    src_file_name: /raid/wmt20-zh-en.clean.tok.src\n","    tgt_file_name: /raid/wmt20-zh-en.clean.tok.src\n","    tokens_in_batch: 512\n","    clean: false\n","    max_seq_length: 512\n","    cache_ids: false\n","    cache_data_per_node: false\n","    use_cache: false\n","    shuffle: false\n","    num_samples: -1\n","    drop_last: false\n","    pin_memory: false\n","    num_workers: 8\n","    load_from_cached_dataset: false\n","    reverse_lang_direction: false\n","    load_from_tarred_dataset: false\n","    metadata_path: null\n","    tar_shuffle_n: 100\n","    \n","[NeMo W 2023-09-18 12:12:03 nlp_overrides:438] Apex was not found. Please see the NeMo README for installation instructions: https://github.com/NVIDIA/apex\n","    Megatron-based models require Apex to function correctly.\n","[NeMo W 2023-09-18 12:12:03 nlp_overrides:446] megatron-core was not found. Please see the NeMo README for installation instructions: https://github.com/NVIDIA/NeMo#megatron-gpt.\n"]},{"output_type":"stream","name":"stdout","text":["[NeMo I 2023-09-18 12:12:08 save_restore_connector:249] Model MTEncDecModel was successfully restored from /root/.cache/torch/NeMo/NeMo_1.21.0rc0/nmt_zh_en_transformer6x6/eff3792e6f4420ba83436be889e92d79/nmt_zh_en_transformer6x6.nemo.\n","[NeMo I 2023-09-18 12:12:08 cloud:68] Downloading from: https://api.ngc.nvidia.com/v2/models/nvidia/nemo/tts_en_fastpitch/versions/1.8.1/files/tts_en_fastpitch_align.nemo to /root/.cache/torch/NeMo/NeMo_1.21.0rc0/tts_en_fastpitch_align/b7d086a07b5126c12d5077d9a641a38c/tts_en_fastpitch_align.nemo\n","[NeMo I 2023-09-18 12:12:26 common:913] Instantiating model from pre-trained checkpoint\n"]},{"output_type":"stream","name":"stderr","text":["[NeMo W 2023-09-18 12:13:18 en_us_arpabet:66] apply_to_oov_word=None, This means that some of words will remain unchanged if they are not handled by any of the rules in self.parse_one_word(). This may be intended if phonemes and chars are both valid inputs, otherwise, you may see unexpected deletions in your input.\n","[NeMo W 2023-09-18 12:13:18 modelPT:161] If you intend to do training or fine-tuning, please call the ModelPT.setup_training_data() method and provide a valid configuration file to setup the train data loader.\n","    Train config : \n","    dataset:\n","      _target_: nemo.collections.tts.torch.data.TTSDataset\n","      manifest_filepath: /ws/LJSpeech/nvidia_ljspeech_train_clean_ngc.json\n","      sample_rate: 22050\n","      sup_data_path: /raid/LJSpeech/supplementary\n","      sup_data_types:\n","      - align_prior_matrix\n","      - pitch\n","      n_fft: 1024\n","      win_length: 1024\n","      hop_length: 256\n","      window: hann\n","      n_mels: 80\n","      lowfreq: 0\n","      highfreq: 8000\n","      max_duration: null\n","      min_duration: 0.1\n","      ignore_file: null\n","      trim: false\n","      pitch_fmin: 65.40639132514966\n","      pitch_fmax: 2093.004522404789\n","      pitch_norm: true\n","      pitch_mean: 212.35873413085938\n","      pitch_std: 68.52806091308594\n","      use_beta_binomial_interpolator: true\n","    dataloader_params:\n","      drop_last: false\n","      shuffle: true\n","      batch_size: 24\n","      num_workers: 0\n","    \n","[NeMo W 2023-09-18 12:13:18 modelPT:168] If you intend to do validation, please call the ModelPT.setup_validation_data() or ModelPT.setup_multiple_validation_data() method and provide a valid configuration file to setup the validation data loader(s). \n","    Validation config : \n","    dataset:\n","      _target_: nemo.collections.tts.torch.data.TTSDataset\n","      manifest_filepath: /ws/LJSpeech/nvidia_ljspeech_val_clean_ngc.json\n","      sample_rate: 22050\n","      sup_data_path: /raid/LJSpeech/supplementary\n","      sup_data_types:\n","      - align_prior_matrix\n","      - pitch\n","      n_fft: 1024\n","      win_length: 1024\n","      hop_length: 256\n","      window: hann\n","      n_mels: 80\n","      lowfreq: 0\n","      highfreq: 8000\n","      max_duration: null\n","      min_duration: null\n","      ignore_file: null\n","      trim: false\n","      pitch_fmin: 65.40639132514966\n","      pitch_fmax: 2093.004522404789\n","      pitch_norm: true\n","      pitch_mean: 212.35873413085938\n","      pitch_std: 68.52806091308594\n","      use_beta_binomial_interpolator: true\n","    dataloader_params:\n","      drop_last: false\n","      shuffle: false\n","      batch_size: 24\n","      num_workers: 0\n","    \n"]},{"output_type":"stream","name":"stdout","text":["[NeMo I 2023-09-18 12:13:18 features:289] PADDING: 1\n","[NeMo I 2023-09-18 12:13:18 save_restore_connector:249] Model FastPitchModel was successfully restored from /root/.cache/torch/NeMo/NeMo_1.21.0rc0/tts_en_fastpitch_align/b7d086a07b5126c12d5077d9a641a38c/tts_en_fastpitch_align.nemo.\n","[NeMo I 2023-09-18 12:13:18 cloud:68] Downloading from: https://api.ngc.nvidia.com/v2/models/nvidia/nemo/tts_hifigan/versions/1.0.0rc1/files/tts_hifigan.nemo to /root/.cache/torch/NeMo/NeMo_1.21.0rc0/tts_hifigan/e6da322f0f7e7dcf3f1900a9229a7e69/tts_hifigan.nemo\n","[NeMo I 2023-09-18 12:13:42 common:913] Instantiating model from pre-trained checkpoint\n"]},{"output_type":"stream","name":"stderr","text":["[NeMo W 2023-09-18 12:13:48 modelPT:161] If you intend to do training or fine-tuning, please call the ModelPT.setup_training_data() method and provide a valid configuration file to setup the train data loader.\n","    Train config : \n","    dataset:\n","      _target_: nemo.collections.tts.data.datalayers.MelAudioDataset\n","      manifest_filepath: /home/fkreuk/data/train_finetune.txt\n","      min_duration: 0.75\n","      n_segments: 8192\n","    dataloader_params:\n","      drop_last: false\n","      shuffle: true\n","      batch_size: 64\n","      num_workers: 4\n","    \n","[NeMo W 2023-09-18 12:13:48 modelPT:168] If you intend to do validation, please call the ModelPT.setup_validation_data() or ModelPT.setup_multiple_validation_data() method and provide a valid configuration file to setup the validation data loader(s). \n","    Validation config : \n","    dataset:\n","      _target_: nemo.collections.tts.data.datalayers.MelAudioDataset\n","      manifest_filepath: /home/fkreuk/data/val_finetune.txt\n","      min_duration: 3\n","      n_segments: 66150\n","    dataloader_params:\n","      drop_last: false\n","      shuffle: false\n","      batch_size: 5\n","      num_workers: 4\n","    \n","[NeMo W 2023-09-18 12:13:48 features:266] Using torch_stft is deprecated and has been removed. The values have been forcibly set to False for FilterbankFeatures and AudioToMelSpectrogramPreprocessor. Please set exact_pad to True as needed.\n"]},{"output_type":"stream","name":"stdout","text":["[NeMo I 2023-09-18 12:13:48 features:289] PADDING: 0\n"]},{"output_type":"stream","name":"stderr","text":["[NeMo W 2023-09-18 12:13:48 features:266] Using torch_stft is deprecated and has been removed. The values have been forcibly set to False for FilterbankFeatures and AudioToMelSpectrogramPreprocessor. Please set exact_pad to True as needed.\n"]},{"output_type":"stream","name":"stdout","text":["[NeMo I 2023-09-18 12:13:48 features:289] PADDING: 0\n","[NeMo I 2023-09-18 12:13:50 save_restore_connector:249] Model HifiGanModel was successfully restored from /root/.cache/torch/NeMo/NeMo_1.21.0rc0/tts_hifigan/e6da322f0f7e7dcf3f1900a9229a7e69/tts_hifigan.nemo.\n"]}],"source":["# Speech Recognition model - Citrinet initially trained on Multilingual LibriSpeech English corpus, and fine-tuned on the open source Aishell-2\n","asr_model = nemo_asr.models.EncDecCTCModel.from_pretrained(model_name=\"stt_zh_citrinet_1024_gamma_0_25\").cuda()\n","\n","# Neural Machine Translation model\n","nmt_model = nemo_nlp.models.MTEncDecModel.from_pretrained(model_name='nmt_zh_en_transformer6x6').cuda()\n","\n","# Spectrogram generator which takes text as an input and produces spectrogram\n","spectrogram_generator = nemo_tts.models.FastPitchModel.from_pretrained(model_name=\"tts_en_fastpitch\").cuda()\n","\n","# Vocoder model which takes spectrogram and produces actual audio\n","vocoder = nemo_tts.models.HifiGanModel.from_pretrained(model_name=\"tts_en_hifigan\").cuda()"]},{"cell_type":"markdown","metadata":{"id":"KPota-JtsqSY"},"source":["## Get an audio sample in Mandarin"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"7cGCEKkcLr52","executionInfo":{"status":"ok","timestamp":1695039060540,"user_tz":-120,"elapsed":974,"user":{"displayName":"","userId":""}},"outputId":"15408438-d130-4bb2-f1c2-3f9c23ff67ec","colab":{"base_uri":"https://localhost:8080/","height":266}},"outputs":[{"output_type":"stream","name":"stdout","text":["--2023-09-18 12:13:50--  https://nemo-public.s3.us-east-2.amazonaws.com/zh-samples/common_voice_zh-CN_21347786.mp3\n","Resolving nemo-public.s3.us-east-2.amazonaws.com (nemo-public.s3.us-east-2.amazonaws.com)... 3.5.128.111, 52.219.178.74, 3.5.128.159, ...\n","Connecting to nemo-public.s3.us-east-2.amazonaws.com (nemo-public.s3.us-east-2.amazonaws.com)|3.5.128.111|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 24813 (24K) [audio/mp3]\n","Saving to: ‘common_voice_zh-CN_21347786.mp3’\n","\n","common_voice_zh-CN_ 100%[===================>]  24.23K  --.-KB/s    in 0.09s   \n","\n","2023-09-18 12:13:50 (256 KB/s) - ‘common_voice_zh-CN_21347786.mp3’ saved [24813/24813]\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["<IPython.lib.display.Audio object>"],"text/html":["\n","                <audio  controls=\"controls\" >\n","                    <source src=\"data:audio/mpeg;base64,\" type=\"audio/mpeg\" />\n","                    Your browser does not support the audio element.\n","                </audio>\n","              "]},"metadata":{},"execution_count":5}],"source":["# Download audio sample which we'll try\n","# This is a sample from MCV 6.1 Dev dataset - the model hasn't seen it before\n","# IMPORTANT: The audio must be mono with 16Khz sampling rate\n","audio_sample = 'common_voice_zh-CN_21347786.mp3'\n","!wget 'https://nemo-public.s3.us-east-2.amazonaws.com/zh-samples/common_voice_zh-CN_21347786.mp3'\n","# To listen it, click on the play button below\n","IPython.display.Audio(audio_sample)"]},{"cell_type":"markdown","metadata":{"id":"BaCdNJhhtBfM"},"source":["## Transcribe audio file\n","We will use speech recognition model to convert audio into text.\n"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"KTA7jM6sL6yC","executionInfo":{"status":"ok","timestamp":1695039071399,"user_tz":-120,"elapsed":10864,"user":{"displayName":"","userId":""}},"outputId":"9ec06a68-7cfa-4b4a-8a81-fa8cc715b966","colab":{"base_uri":"https://localhost:8080/","height":66,"referenced_widgets":["5a044fdcbed54b69b10c6a6c58618467","1cdf8046c0c44111bee4398d8b3ef522","4528e91ba4934d1f862d65b32c7567e3","165abb8776d64e0fa8eb82c36667df9d","ab2ae30698f244708a28303798b6483b","eb1e5e27ed9d4715b99983d91df80ff2","5debbe9b43794056ab85fe02e7038c04","359d1a3839bb43328fb28a193ac34c09","0e5755a584f14383b0a588fb802a74be","3a268b6bca284284b3b8d1bbcfcc0499","1842813faf5c4a93ba39c8578c78c9bd"]}},"outputs":[{"output_type":"display_data","data":{"text/plain":["Transcribing:   0%|          | 0/1 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5a044fdcbed54b69b10c6a6c58618467"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["['我们尽了最大努力']\n"]}],"source":["transcribed_text = asr_model.transcribe([audio_sample])\n","print(transcribed_text)"]},{"cell_type":"markdown","metadata":{"id":"BjYb2TMtttCc"},"source":["## Translate Chinese text into English\n","NeMo's NMT models have a handy ``.translate()`` method."]},{"cell_type":"code","execution_count":7,"metadata":{"id":"kQTdE4b9Nm9O","executionInfo":{"status":"ok","timestamp":1695039072240,"user_tz":-120,"elapsed":871,"user":{"displayName":"","userId":""}},"outputId":"6b336028-6e99-44f8-9a18-4d2d6fff1635","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["['We tried our best']\n"]}],"source":["english_text = nmt_model.translate(transcribed_text)\n","print(english_text)"]},{"cell_type":"markdown","metadata":{"id":"9Rppc59Ut7uy"},"source":["## Generate English audio from text\n","Speech generation from text typically has two steps:\n","* Generate spectrogram from the text. In this example we will use FastPitch model for this.\n","* Generate actual audio from the spectrogram. In this example we will use HifiGan model for this.\n"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"wpMYfufgNt15","executionInfo":{"status":"ok","timestamp":1695039072241,"user_tz":-120,"elapsed":8,"user":{"displayName":"","userId":""}}},"outputs":[],"source":["# A helper function which combines FastPitch and HifiGan to go directly from\n","# text to audio\n","def text_to_audio(text):\n","  parsed = spectrogram_generator.parse(text)\n","  spectrogram = spectrogram_generator.generate_spectrogram(tokens=parsed)\n","  audio = vocoder.convert_spectrogram_to_audio(spec=spectrogram)\n","  return audio.to('cpu').detach().numpy()"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"Pd7G5IV3KR9q","executionInfo":{"status":"ok","timestamp":1695039072926,"user_tz":-120,"elapsed":693,"user":{"displayName":"","userId":""}},"outputId":"56775092-17fc-4486-d46f-5754be7edefe","colab":{"base_uri":"https://localhost:8080/","height":110}},"outputs":[{"output_type":"stream","name":"stderr","text":["[NeMo W 2023-09-18 12:14:02 fastpitch:291] parse() is meant to be called in eval mode.\n","[NeMo W 2023-09-18 12:14:02 fastpitch:368] generate_spectrogram() is meant to be called in eval mode.\n"]},{"output_type":"execute_result","data":{"text/plain":["<IPython.lib.display.Audio object>"],"text/html":["\n","                <audio  controls=\"controls\" >\n","                    <source src=\"data:audio/wav;base64,\" type=\"audio/wav\" />\n","                    Your browser does not support the audio element.\n","                </audio>\n","              "]},"metadata":{},"execution_count":9}],"source":["# Listen to generated audio in English\n","IPython.display.Audio(text_to_audio(english_text[0]), rate=22050)"]},{"cell_type":"markdown","metadata":{"id":"LiQ_GQpcBYUs"},"source":["## Next steps\n","A demo like this is great for prototyping and experimentation. However, for real production deployment, you would want to use a service like [NVIDIA Riva](https://developer.nvidia.com/riva).\n","\n","**NeMo is built for training.** You can fine-tune, or train from scratch on your data all models used in this example. We recommend you checkout the following, more in-depth, tutorials next:\n","\n","* [NeMo fundamentals](https://colab.research.google.com/github/NVIDIA/NeMo/blob/stable/tutorials/00_NeMo_Primer.ipynb)\n","* [NeMo models](https://colab.research.google.com/github/NVIDIA/NeMo/blob/stable/tutorials/01_NeMo_Models.ipynb)\n","* [Speech Recognition](https://colab.research.google.com/github/NVIDIA/NeMo/blob/stable/tutorials/asr/ASR_with_NeMo.ipynb)\n","* [Punctuation and Capitalization](https://colab.research.google.com/github/NVIDIA/NeMo/blob/stable/tutorials/nlp/Punctuation_and_Capitalization.ipynb)\n","* [Speech Synthesis](https://colab.research.google.com/github/NVIDIA/NeMo/blob/stable/tutorials/tts/Inference_ModelSelect.ipynb)\n","\n","\n","You can find scripts for training and fine-tuning ASR, NLP and TTS models [here](https://github.com/NVIDIA/NeMo/tree/main/examples)."]}],"metadata":{"accelerator":"GPU","colab":{"name":"NeMo Getting Started","provenance":[{"file_id":"https://github.com/NVIDIA/NeMo/blob/main/tutorials/AudioTranslationSample.ipynb","timestamp":1695039275943}],"toc_visible":true},"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.12"},"widgets":{"application/vnd.jupyter.widget-state+json":{"5a044fdcbed54b69b10c6a6c58618467":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_1cdf8046c0c44111bee4398d8b3ef522","IPY_MODEL_4528e91ba4934d1f862d65b32c7567e3","IPY_MODEL_165abb8776d64e0fa8eb82c36667df9d"],"layout":"IPY_MODEL_ab2ae30698f244708a28303798b6483b"}},"1cdf8046c0c44111bee4398d8b3ef522":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_eb1e5e27ed9d4715b99983d91df80ff2","placeholder":"​","style":"IPY_MODEL_5debbe9b43794056ab85fe02e7038c04","value":"Transcribing: 100%"}},"4528e91ba4934d1f862d65b32c7567e3":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_359d1a3839bb43328fb28a193ac34c09","max":1,"min":0,"orientation":"horizontal","style":"IPY_MODEL_0e5755a584f14383b0a588fb802a74be","value":1}},"165abb8776d64e0fa8eb82c36667df9d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_3a268b6bca284284b3b8d1bbcfcc0499","placeholder":"​","style":"IPY_MODEL_1842813faf5c4a93ba39c8578c78c9bd","value":" 1/1 [00:10&lt;00:00, 10.15s/it]"}},"ab2ae30698f244708a28303798b6483b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"eb1e5e27ed9d4715b99983d91df80ff2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5debbe9b43794056ab85fe02e7038c04":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"359d1a3839bb43328fb28a193ac34c09":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0e5755a584f14383b0a588fb802a74be":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"3a268b6bca284284b3b8d1bbcfcc0499":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1842813faf5c4a93ba39c8578c78c9bd":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":0}